SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for paas_etl
-- ----------------------------
DROP TABLE IF EXISTS `paas_etl`;
CREATE TABLE `paas_etl`  (
  `etl_id` int NOT NULL AUTO_INCREMENT,
  `tag` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '分类标签',
  `etl_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '任务名称',
  `code` varchar(4000) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT 'JSON配置代码',
  `is_enabled` int NOT NULL DEFAULT 0 COMMENT '是否启动 ',
  `is_extract` int NOT NULL DEFAULT 0 COMMENT '是否启用抽取器',
  `is_load` int NOT NULL DEFAULT 0 COMMENT '是否启用加载器',
  `is_transform` int NOT NULL DEFAULT 1 COMMENT '是否启用转换器',
  `cursor_type` int NOT NULL DEFAULT 0 COMMENT '0时间；1数值',
  `cursor` bigint NOT NULL DEFAULT 0 COMMENT '游标',
  `alarm_mobile` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '报警手机号（多个以,隔开）',
  `e_enabled` int NOT NULL DEFAULT 0,
  `e_max_instance` int NOT NULL DEFAULT 1 COMMENT '抽取器集群数',
  `e_last_exectime` datetime NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `t_enabled` int NOT NULL DEFAULT 0,
  `t_max_instance` int NOT NULL DEFAULT 1 COMMENT '转换器集群数',
  `t_last_exectime` datetime NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `l_enabled` int NOT NULL DEFAULT 0,
  `l_max_instance` int NOT NULL DEFAULT 1 COMMENT '加载器集群数',
  `l_last_exectime` datetime NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `last_extract_time` datetime NULL DEFAULT NULL COMMENT '最后抽取时间',
  `last_load_time` datetime NULL DEFAULT NULL COMMENT '最后加载时间',
  `last_transform_time` datetime NULL DEFAULT NULL COMMENT '最后转换时间',
  PRIMARY KEY (`etl_id`) USING BTREE,
  UNIQUE INDEX `IX_key`(`tag`, `etl_name`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'PAAS-ETL配置表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for paas_file
-- ----------------------------
DROP TABLE IF EXISTS `paas_file`;
CREATE TABLE `paas_file`  (
  `file_id` int NOT NULL AUTO_INCREMENT COMMENT '文件ID',
  `file_type` int NOT NULL DEFAULT 0 COMMENT '文件类型(0:api, 1:pln, 2:tml)',
  `tag` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '分组村签',
  `label` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '标记',
  `path` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '文件路径',
  `rank` int NOT NULL DEFAULT 0 COMMENT '排列（小的排前）',
  `is_staticize` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否静态',
  `is_editable` tinyint(1) NOT NULL DEFAULT 1 COMMENT '是否可编辑',
  `is_disabled` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否禁用',
  `is_exclude` tinyint(1) NOT NULL DEFAULT 0 COMMENT '排除导入',
  `link_to` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '连接到',
  `edit_mode` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '编辑模式',
  `content_type` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '内容类型',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL COMMENT '内容',
  `note` varchar(99) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT '' COMMENT '备注',
  `plan_state` int NOT NULL DEFAULT 0 COMMENT '计划状态',
  `plan_begin_time` datetime NULL DEFAULT NULL COMMENT '计划开始执行时间',
  `plan_last_time` datetime NULL DEFAULT NULL COMMENT '计划最后执行时间',
  `plan_last_timespan` bigint NOT NULL DEFAULT 0 COMMENT '计划最后执行时间长度',
  `plan_interval` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '计划执行间隔',
  `plan_max` int NOT NULL DEFAULT 0 COMMENT '计划执行最多次数',
  `plan_count` int NOT NULL DEFAULT 0 COMMENT '计划执行累计次数',
  `create_fulltime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_fulltime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`file_id`) USING BTREE,
  UNIQUE INDEX `IX_key`(`path`) USING BTREE,
  INDEX `IX_tag`(`tag`) USING BTREE,
  INDEX `IX_label`(`label`) USING BTREE,
  INDEX `IX_file_type`(`file_type`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 318 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = 'PAAS-文件表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of paas_file
-- ----------------------------
INSERT INTO `paas_file` VALUES (12, 2, '_code', 'tml', '/_code/java_model', -1, 1, 1, 0, 0, NULL, 'freemarker', '', 'import lombok.Getter;\nimport lombok.Setter;\nimport java.util.*;\n\n@Getter\n@Setter\npublic class ${table_camel!}Model {\n    \n    <#list fields!! as f>\n	/** ${(f.comment)!} */\n    public ${(f.type)!} ${(f.field)!};\n    </#list>\n\n}', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-15 18:27:22', '2020-01-16 15:27:17');
INSERT INTO `paas_file` VALUES (13, 0, 'sdk_water', 'hook.start', '/sdk_water/_init.jsx', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'if(__global.water && __global.water.ver==1){\n    return {msg:\'old\'};\n}\n\n// 不带 var 开头的变量为引擎全局变量\n__global.water = {ver:2};\n\nwater = __global.water;\n    \nWaterClient = Java.type(\'org.noear.water.WaterClient\');\nWaterProxy = Java.type(\'org.noear.water.WaterProxy\');\nWaterLogger = Java.type(\'org.noear.water.log.WaterLogger\');\n\nwater.client = WaterClient;\nwater.proxy  = WaterProxy;\n\nwater.cfg = function(tagKey){return WaterClient.Config.getByTagKey(tagKey)};\nwater.db = function(tagKey){return water.cfg(tagKey).getDb()};\nwater.rd = function(tagKey,i){return water.cfg(tagKey).getRd(i)};\nwater.mg = function(tagKey,c){return water.cfg(tagKey).getMg(c)};\nwater.updateCache = function(tags){WaterClient.Notice.updateCache(tags)};\n\nwater.call = function(service,fun,args){if(!args){args={}} return WaterProxy.call(service,fun,args);};\nwater.paas = function(path,args){if(!args){args={}} return WaterProxy.paas(path,args)};\nwater.raas = function(path,args){var args2={};if(args){for(var k in args){var v=args[k];if(v){if(v instanceof Object){args2[k]=JSON.stringify(v)}else{args2[k]=v}}}}return WaterProxy.raas(path,args2)};\n\nwater.heihei = function(target,msg){return WaterClient.Notice.heihei(target, msg);};\n\nwater.sendMessage = function(topic,message){ return WaterClient.Message.sendMessage(topic, message); }\n\nLocalDate = Java.type(\'java.time.LocalDate\');\nLocalTime = Java.type(\'java.time.LocalTime\');\nLocalDateTime = Java.type(\'java.time.LocalDateTime\');\n\nXUtil.ridAdd(\'WaterLogger.get(name)\',WaterLogger.class);\n\nreturn \'OK\';', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-16 15:23:58', '2021-02-02 17:34:11');
INSERT INTO `paas_file` VALUES (14, 0, 'sdk_water', '', '/sdk_water/_test.jsx', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'return water.db(\'water/water\')\n            .table(\'water_cfg_properties\')\n            .limit(1)\n            .select(\'*\').getMap();\n\n\n\n// let list = water.db(\'water/water\')\n//             .table(\'water_cfg_properties\')\n//             .limit(4)\n//             .select(\'*\')\n//             .getMapList();\n            \n            \n// for(let m in list){\n//     if(m == 0){\n//     return \'0\';\n//     }\n// }\n\n// return \'OK2\';\n', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-16 16:04:53', '2020-07-01 12:06:26');
INSERT INTO `paas_file` VALUES (15, 0, 'sdk_rock', 'hook.start', '/sdk_rock/_init.jsx', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'if(__global.rock && __global.rock.ver==2){\n    return {msg:\'old\'};\n}\n\n// 不带 var 开头的变量为引擎全局变量\n__global.rock = {ver:1};\n\nrock = __global.rock;\n    \nRockClient = Java.type(\'sponge.rock.RockClient\');\nRockUtil   = Java.type(\'sponge.rock.RockUtil\');\n\nRockClient.tryInit(cache);\n\n\nrock.client = RockClient;\nrock.util   = RockUtil;\n\nrock.app = function(appID){\n    return RockClient.getApp(appID)\n};\n\nrock.cmd = function(service,cmd,args){\n    var appID  = args.app;\n    var appVer = args.ver;\n    \n    var appKey = RockClient.getApp(appID).app_key;\n\n    var p = JSON.stringify(args.data);\n\n    var token = cmd + \"#\" + p + \"#\" + appKey;\n    var k = appID + \".\" + appVer + \".\" + XUtil.sha1(token, \"UTF-8\");\n\n\n    var form = XUtil.newMap();\n\n    form.put(\"p\", p);\n    form.put(\"k\", k);\n    form.put(\"cmd\", cmd);\n\n    return WaterProxy.call(service, cmd, form); \n};\n\nrock.api = function(service,fun,args){\n    return WaterProxy.call(service, fun, args);//WaterProxy\n};\n\nrock.newID = function(group,key,times){\n    return rock.client.newID(group, key, times);\n};\n\n\n\n', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-16 17:04:31', '2020-06-18 11:22:27');
INSERT INTO `paas_file` VALUES (16, 0, 'sdk_rock', '', '/sdk_rock/_test.jsx', 0, 0, 1, 0, 0, NULL, 'javascript', '', '// return rock.app(1).app_key;\n\nlet id = rock.newID(\'LOG_ID\', \'sword_stats_overview\', 60 * 60 * 24 * 365); \n\nXUtil.log(\'new_id:\'+id);\n\nreturn id;', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-16 17:07:17', '2020-05-26 14:32:11');
INSERT INTO `paas_file` VALUES (24, 2, '_code', '', '/_code/java_model_ibinder', -1, 1, 1, 0, 0, NULL, 'freemarker', '', 'import lombok.Getter;\nimport lombok.Setter;\nimport org.noear.weed.GetHandlerEx;\nimport org.noear.weed.IBinder;\nimport java.math.BigDecimal;\nimport java.util.*;\n\n@Getter\n@Setter\npublic class ${table_camel!}Model implements IBinder {\n    \n    <#list fields!! as f>\n	/** ${(f.comment)!} */\n    public ${(f.type)!} ${(f.field)!};\n    </#list>\n\n    @Override\n	public void bind(GetHandlerEx s) {\n        <#list fields as f>\n        ${(f.field)!} = s.get(\"${(f.field)!}\").value(${(f.def)!});\n        </#list>\n	}\n	\n	@Override\n	public IBinder clone() {\n		return new ${table_camel!}Model();\n	}\n\n}', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-17 14:45:58', '2020-08-19 16:15:06');
INSERT INTO `paas_file` VALUES (25, 2, '_code', '', '/_code/java_edit', 0, 1, 1, 0, 0, NULL, 'freemarker', '', 'public static void edit${table_camel!} (<#list fields!! as f>${(f.type)!} ${(f.field)!}<#sep>,\n                             </#sep></#list>) throws SQLException {\n                                 \n    DbTableQuery query = db().table(\"${tb!}\")<#list fields!! as f><#if (f.field)! != pri_key!>.set(\"${(f.field)!}\", ${(f.field)!})</#if><#sep>\n                             </#sep></#list>;\n\n    if (${pri_key!} > 0) {\n        query.where(\"${pri_key!} = ?\", ${pri_key!})\n             .update();\n    } else {\n        query.insert();\n    }\n\n}\n', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-17 14:46:29', '2020-01-17 14:46:37');
INSERT INTO `paas_file` VALUES (26, 2, '_code', '', '/_code/java_edit2', 0, 1, 1, 0, 0, NULL, 'freemarker', '', 'public static void edit${table_camel!} (${table_camel!}Model m) throws SQLException {\n                                 \n    DbTableQuery qr = db().table(\"${tb!}\")\n                          .setEntity(m);\n\n    if (${pri_key!} > 0) {\n        qr.where(\"${pri_key!} = ?\", ${pri_key!})\n          .update();\n    } else {\n        qr.insert();\n    }\n\n}\n', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-17 14:46:51', '2020-01-17 14:47:02');
INSERT INTO `paas_file` VALUES (27, 2, '_code', '', '/_code/java_crud', 0, 1, 1, 0, 0, NULL, 'freemarker', '', 'public static void save${table_camel!} (${table_camel!}Model m) throws Exception {\n                                 \n    DbTableQuery qr = db().table(\"${tb!}\")\n                          .setEntity(m);\n\n    if (m.${pri_key!} > 0) {\n        qr.where(\"${pri_key!} = ?\", m.${pri_key!})\n          .update();\n    } else {\n        qr.set(\"operator\",Session.current().getUserName())\n          .set(\"log_date\",Datetime.Now().getDate())\n          .set(\"log_fulltime\",Datetime.Now().getFullTime())\n          .insert();\n    }\n}\n\npublic static void del${table_camel!} (int ${pri_key!}) throws SQLException {\n                                 \n    db().table(\"${tb!}\")\n        .where(\"${pri_key!} = ?\", ${pri_key!})\n        .delete();\n}\n\npublic static ${table_camel!}Model get${table_camel!} (int ${pri_key!}) throws SQLException {\n                                 \n    return db().table(\"${tb!}\")\n              .where(\"${pri_key!} = ?\", ${pri_key!})\n              .orderBy(\"log_fulltime desc\")\n              .limit(1)\n              .select(\"*\")\n              .getItem(new ${table_camel!}Model());\n}\n\n\npublic static List<${table_camel!}Model> get${table_camel!}List (${table_camel!}Model m) throws SQLException {\n                                 \n    return db().table(\"${tb!}\")\n              .where(\"1=1\")\n              .orderBy(\"log_fulltime desc\")\n              .select(\"*\")\n              .getList(new ${table_camel!}Model());\n}\n\n\npublic static List<${table_camel!}Model> get${table_camel!}ListByPage (${table_camel!}Model m, PageModel pageModel) throws SQLException {\n                                 \n    DbTableQuery query = db().table(\"${tb!}\")\n                        .where(\"1=1\");\n    if (pageModel != null) {\n      int start = (pageModel.page - 1) * pageModel.pageSize;\n      DbTableQuery queryCount = query;\n      pageModel.setRowCount(queryCount.select(\"count(*)\").getCount());\n      return query\n          .orderBy(\"log_fulltime desc\")\n          .limit(start, pageModel.pageSize)\n          .select(\"*\")\n          .getList(new ${table_camel!}Model());\n    } else {\n      return query.orderBy(\"log_fulltime desc\").select(\"*\").getList(new ${table_camel!}Model());\n    }          \n}\n\n\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class PageModel {\n\n    public Integer page;\n    public Integer pageSize;\n    public long    rowCount;\n\n  public PageModel() { }\n\n  public PageModel(Integer page, Integer pageSize) {\n    this.page = (page == null || page == 0)?1:page;\n    this.pageSize = (pageSize == null || pageSize == 0)?10:pageSize;\n  }\n}\n\n\n', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-17 14:47:15', '2020-01-17 14:47:27');
INSERT INTO `paas_file` VALUES (28, 2, '_code', '', '/_code/java_insert', 0, 1, 1, 0, 0, NULL, 'freemarker', '', 'import noear.weed.DbQueryProcedure;\nimport webapp.Config;\n\npublic class ${tb!}_add extends DbQueryProcedure {\n\n    <#list fields!! as f>\n    public ${(f.type)!} ${(f.field)!};\n    </#list>\n\n    public ${tb!}_add() {\n\n        super(Config.${key!});\n\n        sql(\"INSERT INTO `${tb!}` (<#list fields!! as f>`${(f.field)!}`<#sep>, </#sep></#list>)\" +\n            \" VALUES (<#list fields!! as f>@${(f.field)!}<#sep>,  </#sep></#list>);\");\n\n        <#list fields!! as f>\n        set(\"@${(f.field)!}\", () -> ${(f.field)!});\n        </#list>\n\n    }\n\n}\n', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-17 14:47:48', '2020-01-17 14:47:54');
INSERT INTO `paas_file` VALUES (29, 2, '_code', '', '/_code/paas_stats_save', 0, 1, 1, 0, 0, NULL, 'freemarker', '', 'function insertOrUpdateResult(target_date, <#list fields!! as f><#if f.field != pri_key>${(f.field)!}<#sep>, </#sep></#if></#list>) {\n    <#list fields!! as f>\n    <#if f.field != pri_key>\n    if (!${f.field}) {\n		${f.field} = 0;\n    }\n    </#if>\n    </#list>\n\n	var is_exist = db2json(water\n		.db(\"${tag}.${key}\")\n		.table(\"${tb}\")\n		.where(\"target_date = ?\", target_date)\n		.select(\"COUNT(*)\")\n		.getCount());\n	\n	if (is_exist && 0 < is_exist) {\n		water\n            .db(\"${tag}.${key}\")\n            .table(\"${tb}\")\n            <#list fields!! as f>\n            <#if f.field != pri_key>\n            .set(\"${f.field}\", ${f.field})\n            </#if>\n            </#list>\n			.set(\"update_date\", now.getDate())\n			.set(\"update_fulltime\", now.getFulltime())\n			.where(\"target_date = ?\", target_date)\n			.update();\n	} else {\n		water\n            .db(\"${tag}.${key}\")\n            .table(\"${tb}\")\n            .set(\"${pri_key}\", rock.client.newID(\"${tag?upper_case}\", \"${tb}_id\", 315360000))\n            <#list fields!! as f>\n            <#if f.field != pri_key>\n            .set(\"${f.field}\", ${f.field})\n            </#if>\n            </#list>\n			.set(\"target_date\", target_date)\n            .set(\"create_date\", now.getDate())\n            .set(\"create_fulltime\", now.getFulltime())\n			.set(\"update_date\", now.getDate())\n			.set(\"update_fulltime\", now.getFulltime())\n			.insert();\n	}\n}', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-17 14:48:07', '2020-01-17 14:48:21');
INSERT INTO `paas_file` VALUES (30, 2, '_code', '', '/_code/weed_xml_insert', 0, 1, 1, 0, 0, NULL, 'freemarker', '', '<sql id=\"add_${tb!}\"\n     :return=\"long\"\n     :caching=\"cache_${key!}\"\n     :cacheClear=\"${tb!}_<#noparse>${</#noparse>${pri_key!}<#noparse>}</#noparse>\"\n     :remarks=\"新增${tb!}\">\n    INSERT INTO `${tb!}` (<#list fields!! as f>`${(f.field)!}`<#sep>, </#sep></#list>)\n                  VALUES (<#list fields!! as f>@{${(f.field)!}:${(f.type)!}}<#sep>, </#sep></#list>)\n</sql>', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-17 14:48:34', '2020-08-07 14:18:35');
INSERT INTO `paas_file` VALUES (31, 2, '_code', '', '/_code/java_model_ibinder_2', 0, 1, 1, 0, 0, NULL, 'freemarker', '', 'import org.noear.weed.*;\n\nimport java.util.*;\n\npublic class ${table_camel!}Model implements IBinder {\n    \n    <#list fields!! as f>\n	// ${(f.comment)!}\n    public ${(f.type)!} ${(f.field)!};\n    </#list>\n\n	public void bind(GetHandlerEx s) {\n        <#list fields as f>\n        ${(f.field)!} = s.get(\"${(f.field)!}\").value(${(f.def)!});\n        </#list>\n	}\n	\n	public IBinder clone() {\n		return new ${table_camel!}Model();\n	}\n\n}\n', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-17 14:48:57', '2020-01-17 14:49:07');
INSERT INTO `paas_file` VALUES (34, 0, '_demo', '', '/_demo/ali_oss_cfg_xutil', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'return XUtil.cfg(\'_demo/ali_oss_cfg\').getProp();', '测试', 0, NULL, NULL, 0, '', 0, 0, '2020-01-21 15:12:05', '2021-02-06 13:16:01');
INSERT INTO `paas_file` VALUES (35, 0, 'water', '', '/water/paas/help/api/', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'var System = Java.type(\'java.lang.System\');\n\n\nvar sysinfo = (\'Running on Java version: \' + System.getProperty(\'java.version\')) + \'；\' + (\'Unix time from Java: \' + System.currentTimeMillis());\n\n\nreturn modelAndView(\"/water/paas/help/api/view\",{sysinfo:sysinfo});', '', 0, NULL, NULL, 0, '', 0, 0, '2020-02-05 11:25:59', '2021-03-05 14:46:54');
INSERT INTO `paas_file` VALUES (36, 0, 'water', '', '/water/paas/help/api/view', 0, 0, 1, 0, 0, NULL, 'freemarker', 'code/internal', '<!doctype html>\n<html class=\"frm10\">\n<head>\n    <title>接口手册</title>\n    <link rel=\"stylesheet\" href=\"//jtx.noear.org/img/_core/durian/main.css?v=14\" />\n    <script src=\"//cdn.bootcss.com/jquery/3.4.1/jquery.min.js\"></script>\n    <style>\n    block{margin:0 10px;}\n    </style>\n</head>\n<body>\n<main>\n\n<div class=\"mar10-t mar10-b\"><h2>概要：</h2></div>\n<br/>\n\n<block>\n${sysinfo!}\n</block>\n<br/>\n<block>\n    <h2>已安装的 脚本或模板执行器</h2>\n    <hr/>\n    <ul>\n        <#list XUtil.executorList() as m1>\n        <li>\n            <div>${m1}</div>\n        </li>\n        </#list>\n    </ul>\n</block>\n<br/>\n\n<block>\n    <h2>脚本和模板执行器 共享嵌入接口或对象</h2>\n    <hr/>\n    <ul>\n        <li>\n            <div class=\"t3\">/** 默认数据访问对象（:org.noear.weed.DbContext） */</div>\n            <div>db</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 默认缓存服务对象（:org.noear.weed.cache.ICacheServiceEx），可被替换 */</div>\n            <div>cache</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 当前上下文对象（:org.noear.solon.core.handle.Context） */</div>\n            <div>ctx</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 本地缓存服务对象（:org.noear.weed.cache.ICacheServiceEx） */</div>\n            <div>localCache</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 引擎嵌入基础工具 */</div>\n            <div>XUtil</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 引擎嵌入锁工具 */</div>\n            <div>XLock</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 引擎嵌入函数总线（用于跨语法共享函数） */</div>\n            <div>XFun</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 引擎嵌入消息总线（用于水平拆分或扩展业务处理） */</div>\n            <div>XMsg</div>\n        </li>\n    </ul>\n</block>\n<br/>\n\n<block>\n    <h2>脚本执行器 专属嵌入接口或对象</h2>\n    <hr/>\n    <ul>\n        <li>\n            <div class=\"t3\">/** 加载模块或类 */</div>\n            <div>var obj = <b>requireX</b>(path);</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 返回模块和视图 */</div>\n            <div>return <b>modelAndView</b>(path, model);</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 其它嵌入类 */</div>\n            <div>XContext、ONode、Datetime、Timecount、Timespan</div>\n        </li>\n    </ul>\n</block>\n\n<br/>\n<div class=\"mar10-t mar10-b\"><h2>具体：<n style=\'font-size:1rem;font-weight:normal; \'>（可借用浏览器查找功能快速定位）</n></h2></div>\n<br/>\n\n<#list XUtil.interfaceList() as l1>\n<block>\n    <div><h2>${l1.name}::${l1.type}</h2></div>\n    <hr/>\n    <ul>\n        <#list l1.methods as s1>\n        <li>\n            <div class=\"t3\">${XUtil.htmlEncode(s1.note)!}</div>\n            <div>${s1.code}</div>\n        </li>\n        </#list>\n    </ul>\n</block>\n</#list>\n\n\n</main>\n</body>\n</html>', '', 0, NULL, NULL, 0, '', 0, 0, '2020-02-05 11:37:27', '2021-01-14 12:12:22');
INSERT INTO `paas_file` VALUES (39, 0, 'sdk_water', '', '/sdk_water/_test_paas.jsx', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'return water.paas(\'/sdk_water/_test.jsx\',{});', '', 0, NULL, NULL, 0, '', 0, 0, '2020-03-12 10:00:31', '2020-03-17 10:26:17');
INSERT INTO `paas_file` VALUES (40, 0, 'sdk_water', '', '/sdk_water/_test_xfun.jsx', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'return XFun.callFile(\'/sdk_water/_test.jsx\',{});', '', 0, NULL, NULL, 0, '', 0, 0, '2020-03-12 10:04:52', '2020-03-12 10:05:15');
INSERT INTO `paas_file` VALUES (41, 0, 'sdk_water', '', '/sdk_water/_test_raas.jsx', 0, 0, 1, 0, 0, NULL, 'javascript', '', '\nlet args = {\'req_device\':\'f62187db1ac4143a552208bb78bc3f42cd2ebe89\',\'req_ip\':\'117.136.56.189\',\'open_id\':10009493,\'mobile\':\'15858560661\'};\n\n\nreturn water.raas(\'/m/angel/num_risk_model\',{args: args});', '', 0, NULL, NULL, 0, '', 0, 0, '2020-03-12 13:33:53', '2020-03-12 13:53:24');
INSERT INTO `paas_file` VALUES (42, 0, '_demo', '', '/_demo/ali_oss_cfg_water', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'return water.cfg(\'_demo/ali_oss_cfg\').getProp();', '测试', 0, NULL, NULL, 0, '', 0, 0, '2020-03-17 10:27:59', '2020-05-21 12:06:23');
INSERT INTO `paas_file` VALUES (69, 0, '_funs', '', '/_funs/_api.clz', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'this.checkParamsIsNot0 = function(c,keys){\n    for(var i in keys){\n      if(c.paramAsInt(keys[i]) == 0){\n    	  c.attrMap().code = 19;\n    	  c.attrMap().msg = \'参数不能为0(\'+keys[i]+\')\';\n          return false;\n      }\n    }\n    \n    return true;    \n}\n\nthis.checkParamsIsOk = function(c,keys){\n    for(var i in keys){\n      if(c.param(keys[i]) == null){\n    	c.attrMap().code = 19;\n    	c.attrMap().msg = \'参数缺少或有错误(\'+keys[i]+\')\';\n        return false;\n      }\n    }\n    \n    return true;    \n}\n\nthis.host_isWhitelist = function(c,g){\n    var rUri = c.header(\'Referer\');\n    \n    if(!rUri){\n      c.attrMap().code = 0;\n      c.attrMap().msg  = \'ip is not web\';\n      return false;\n    }\n    \n    if(!g){\n      g = \'server\';\n    }\n    \n    var rUri2 = java.net.URI.create(rUri);\n    var host2 = rUri2.getHost();\n    \n    if(WaterClient.Whitelist.existsOfDomain(g, host2)){\n       return true;\n    }else{\n       c.attrMap().code = 0;\n       c.attrMap().msg  = \'ip is not whitelist\';\n       return false;\n    }\n}\n\nthis.ip_isWhitelist = function(c,g){\n    if(!g){\n      g = \'server\';\n    }\n    \n    var ip = XUtil.ip();\n    \n    if(WaterClient.Whitelist.existsOfIp(g,ip)){\n       return true;\n    }else{\n       c.attrMap().code = 0;\n       c.attrMap().msg  = \'ip is not whitelist\';\n       return false;\n    }    \n}\n', '', 0, NULL, NULL, 0, '', 0, 0, '2020-05-06 11:30:08', '2020-06-19 15:27:30');
INSERT INTO `paas_file` VALUES (70, 0, '_funs', '', '/_funs/_cmd.clz', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'this.checkParamsIsNot0 = function(c,keys) {\n    for(var i in keys){\n      if(c.paramAsInt(keys[i])==0){\n    	  c.attrMap().code = 19;\n    	  c.attrMap().msg = \'参数不能为0(\'+keys[i]+\')\';\n          return false;\n      }\n    }\n    \n    return true;\n}\n\nthis.checkParamsIsOk = function(c,keys){\n    for(var i in keys){\n      if(c.param(keys[i])==null){\n    	c.attrMap().code = 19;\n    	c.attrMap().msg = \'参数缺少或有错误(\'+keys[i]+\')\';\n        return false;\n      }\n    }\n    \n    return true;    \n}', '', 0, NULL, NULL, 0, '', 0, 0, '2020-05-06 11:33:56', '2020-06-19 15:23:24');
INSERT INTO `paas_file` VALUES (83, 0, 'sdk_water', '', '/sdk_water/_test_time.jsx', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'var vm = {};\n\nvm.LocalTime = LocalTime.now().toString();\nvm.LocalDate= LocalDate.now().toString();\nvm.LocalDateTime = LocalDateTime.now().toString();\nvm.test = \'1\';\n\nreturn vm;', '', 0, NULL, NULL, 0, '', 0, 0, '2020-05-29 21:24:00', '2020-08-05 10:46:49');
INSERT INTO `paas_file` VALUES (103, 1, 'water', '', '/water_raas/sync_log2all', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'water/water_log\');\n\nvar date = Datetime.Now().addDay(-2).getDate(); // SELECT DATE_FORMAT(DATE_ADD(NOW(),INTERVAL -2 DAY),\'%Y%m%d\')\n\ndb2.exe(`INSERT INTO rubber_log_request_all\nSELECT * FROM rubber_log_request WHERE log_date=?`, date);\n\n\nreturn \'OK\';', '将处理日志同步到总表（处理表只保持30天）', 9, '2020-06-15 00:00:00', '2021-03-18 00:00:02', 13, '1d', 0, 260, '2020-06-15 12:54:13', '2020-08-19 12:15:35');
INSERT INTO `paas_file` VALUES (119, 0, 'sponge_track', '', '/sponge_track/get.h5.card.uv', 0, 0, 1, 0, 0, NULL, 'javascript', 'application/json', 'var row_id= ctx.paramAsInt(\"row_id\",0);\n\n/**\n1004412：h5首页卡片\n1004382：原生首页卡片\n*/\n\nvar value =water.db(\"sponge/sponge_track\")\n                .table(\"short_url_ex_track_stat\")\n			    .where(\" vi= 3\")\n                .and(\"url_id = ?\", 1004412)\n                .and(\"row_id >=?\",row_id)\n                .limit(100)\n                .select(\"row_id,uv_today,vd,vi\")\n                .getMapList();\nreturn value;', '获取h5首页卡片uv', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 12:58:57', '2020-06-15 13:00:08');
INSERT INTO `paas_file` VALUES (120, 0, 'sponge_track', '', '/sponge_track/log.day', 0, 0, 1, 0, 0, NULL, 'javascript', 'application/json', '//\n// 参数：tag_id,date\n//\n\nlet _api = requireX(\'/_funs/_api.clz\');\n\nif(!_api.checkParamsIsNot0(ctx,[\"tag_id\",\"date\"])){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.ip_isWhitelist(ctx)){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nvar tag_id = ctx.pramAsInt(\"tag_id\");\nvar date   = ctx.pramAsInt(\"date\");\nvar page   = ctx.pramAsInt(\"page\");\nvar size   = ctx.pramAsInt(\"size\");\n\nif(!size){\n  size=50;\n}\n\nvar list = water.db(\"sponge/sponge_track\")\n                .table(\"short_redirect_log_30d\")\n			    .where(\"log_date = ?\",date)\n                         .and(\"tag_id = ?\", tag_id)\n                         .groupBy(\"user_key\")\n                         .limit(page*size, size)\n			             .select(\"user_key AS ukey, log_date\")\n                         .getMapList();\n\nif (list && list.length > 0) {\n  return {code:1,msg:\'success\',list:list};\n} else {\n  return {code:2,msg:\'没有相关数据\',list:[]};\n}', '参数：tag_id,date', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 13:00:56', '2020-06-15 13:12:42');
INSERT INTO `paas_file` VALUES (121, 0, 'sponge_track', '', '/sponge_track/log.day.no.duplicate', 0, 0, 1, 0, 0, NULL, 'javascript', 'application/json', '//\n// 参数：log_date,tag_id\n//\n\nlet _api = requireX(\'/_funs/_api.clz\');\n\nif (!_api.checkParamsIsOk(ctx,[\"log_date\", \"tag_id\"])) {\n    return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.checkParamsIsNot0(ctx,[\"size\"])){\n    return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.ip_isWhitelist(ctx)){\n    return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nvar page     = ctx.paramAsInt(\"page\");\nvar size     = ctx.paramAsInt(\"size\");\nvar tag_id   = ctx.paramAsInt(\'tag_id\');\nvar log_date = ctx.paramAsInt(\'log_date\');\n\nvar click_list = water.db(\"sponge/sponge_track\")\n                      .table(\"short_redirect_log_30d s\")\n                      .innerJoin(\"short_url s1\").on(\"s.url_id = s1.url_id\")\n                      .where(\"s.tag_id = ?\", tag_id).and(\"s.log_date = ?\", log_date)\n                      .groupBy(\"s.user_key,s1.url_partner_key\")\n                      .limit(page*size, size)\n                      .select(\"s.url_id,s.tag_id,s.user_id,s.user_key,s1.url_partner_key,s1.url_name,s.v5 udid\")\n                      .getMapList();\n\nif (click_list && click_list.length > 0) {\n    return {code:1, msg:\'success\', list:click_list};\n} else {\n    return {code:2,msg:\'没有相关数据\',list:[]};\n}\n', '参数：log_date,tag_id', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 13:06:16', '2020-10-14 16:32:56');
INSERT INTO `paas_file` VALUES (122, 0, 'sponge_track', '', '/sponge_track/log.ukey.time', 0, 0, 1, 0, 0, NULL, 'javascript', 'application/json', '//\n// 参数：tag_id,page,size,log_date\n//\n\nlet _api = requireX(\'/_funs/_api.clz\');\n\nif(!_api.checkParamsIsNot0(ctx,[\"tag_id\"])){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.checkParamsIsNot0(ctx,[\"size\"])){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.ip_isWhitelist(ctx)){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\n\nvar tag_id   = ctx.pramAsInt(\"tag_id\");\nvar page     = ctx.pramAsInt(\"page\");\nvar size     = ctx.pramAsInt(\"size\");\nvar log_date = ctx.pramAsInt(\"log_date\");\n\n\nvar list = water.db(\"sponge/sponge_track\")\n                .table(\"short_redirect_log_30d\")\n			    .where(\"log_date = ?\",log_date).and(\"tag_id = ?\", tag_id)\n                .groupBy(\"user_key\")\n                .orderBy(\"log_id\")\n                .limit(page*size, size)\n	            .select(\"user_key AS ukey, MIN(log_date) AS first_date\")\n                .getMapList();\n\nif (list && list.length > 0) {\n  return {code:1,msg:\'success\',list:list};\n} else {\n  return {code:2,msg:\'没有相关数据\',list:[]};\n}\n', '参数：tag_id,page,size,log_date', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 13:08:30', '2020-06-15 13:13:06');
INSERT INTO `paas_file` VALUES (123, 0, 'sponge_track', '', '/sponge_track/log.ukey.time.new', 0, 0, 1, 0, 0, NULL, 'javascript', 'application/json', '//\n// 参数：tag_id,size,page,log_date\n//\n\nlet _api = requireX(\'/_funs/_api.clz\');\n\nif(!_api.checkParamsIsNot0(ctx,[\"tag_id\"])){\n    return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.checkParamsIsNot0(ctx,[\"size\"])){\n    return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.ip_isWhitelist(ctx)){\n    return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\n\nvar tag_id   = ctx.pramAsInt(\"tag_id\");\nvar page     = ctx.pramAsInt(\"page\");\nvar size     = ctx.pramAsInt(\"size\");\nvar log_date = ctx.pramAsInt(\"log_date\");\n\n\nvar list = water.db(\"sponge/sponge_track\")\n                .table(\"short_redirect_log_30d\")\n                .where(\"log_date = ?\",log_date).and(\"tag_id = ?\", tag_id)\n                .groupBy(\"user_key\")\n                .orderBy(\"log_id\")\n                .limit(page*size, size)\n                .select(\"user_key AS ukey, MIN(log_date) AS first_loan_date, \" +\n                    \"MIN(log_fulltime) AS first_loan_time, MAX(log_date) AS last_loan_date, \" +\n                    \"MAX(log_fulltime) AS last_loan_time\")\n                .getMapList();\n\nif (list && list.length > 0) {\n    return {code:1,msg:\'success\',list:list};\n} else {\n    return {code:2,msg:\'没有相关数据\',list:[]};\n}', '用户首次与最近登录贷超', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 13:11:49', '2020-06-15 13:15:30');
INSERT INTO `paas_file` VALUES (124, 0, 'sponge_track', '', '/sponge_track/log.urls', 0, 0, 1, 0, 0, NULL, 'javascript', 'application/json', '//\n// 参数：user_key,tag_id?,date?\n//\n\nlet _api = requireX(\'/_funs/_api.clz\');\n\n\nif(!_api.checkParamsIsOk(ctx,[\"udid\"])){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.ip_isWhitelist(ctx)){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nvar udid = ctx.param(\"udid\");\nvar tag_id   = ctx.paramAsInt(\"tag_id\",0);\nvar date     = ctx.paramAsInt(\"date\",0);\n\n\nvar tb = water.db(\"sponge/sponge_track\").table(\"short_redirect_log_30d s\")\n   .innerJoin(\"short_url u\")\n   .innerJoin(\"track_tag t\")\n   .on(\"s.url_id = u.url_id\")\n   .and(\"s.tag_id = t.tag_id\")\n   .where(\"s.v5 = ?\",udid);\n\nif(tag_id>0){\n  tb.and(\"s.tag_id = ?\", tag_id);\n}\n\nif (date > 0) {\n  tb.and(\"s.log_date = ?\",date);\n}\n\nvar list = tb.orderBy(\"s.log_fulltime desc\")\n              .limit(50)\n              .select(\"u.url_name,u.url_partner_key,t.tag_name,s.url_id,s.tag_id,s.log_date,DATE_FORMAT(s.log_fulltime,\'%Y-%m-%d %H:%i:%s\') log_fulltime\")\n              .getMapList();\n\n\nlet code = 1;\nlet msg = \'success\';\n\nreturn {code:code, msg:msg, data:list};\n', 'ok', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 13:49:21', '2020-09-18 15:45:32');
INSERT INTO `paas_file` VALUES (125, 0, 'sponge_track', '', '/sponge_track/pui.tag.urls', 0, 0, 1, 0, 0, NULL, 'javascript', 'application/json', '//\n// 参数：tag_id,date\n//\n\nlet _api = requireX(\'/_funs/_api.clz\');\n\n\nif(!_api.checkParamsIsNot0(ctx,[\"tag_id\",\"date\"])){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.ip_isWhitelist(ctx)){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nvar tag_id = ctx.pramAsInt(\"tag_id\");\nvar date   = ctx.pramAsInt(\"date\");\n\nvar list = water.db(\'sponge/sponge_track\')\n                .exe(`SELECT s.url_id,s.url_name,s.url_partner_key,t.pv,t.uv,t.ip FROM stat_date_hour_pv_uv_ip t INNER JOIN short_url s ON t.url_id = s.url_id WHERE t.tag_id = ${tag_id} AND t.log_date = ${date} AND t.log_hour = -1`);\n\n\nreturn {code:1,msg:\'success\',data:list};', 'ok', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 13:49:57', '2020-06-15 13:58:35');
INSERT INTO `paas_file` VALUES (126, 0, 'sponge_track', '', '/sponge_track/pui.track.get', 0, 0, 1, 0, 0, NULL, 'javascript', 'application/json', '//\n// 参数：vi,vd,date_start,date_end,url_id,log_hour\n//\n\nlet _api = requireX(\'/_funs/_api.clz\');\n\n\n\nif(!_api.checkParamsIsNot0(ctx,[\"date_start\",\"date_end\"])){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\n\nvar vi          = ctx.pramAsInt(\"vi\");\nvar vd          = ctx.param(\"vd\");\nvar notvd       = ctx.param(\"notvd\");\nvar date_start  = ctx.pramAsInt(\"date_start\");\nvar date_end    = ctx.pramAsInt(\"date_end\");\nvar url_id      = ctx.pramAsInt(\"url_id\");\nvar log_hour    = ctx.pramAsInt(\"log_hour\");\nvar inlist      = ctx.param(\"inlist\");\n\nvar selectDb = water.db(\"sponge/sponge_track\")\n                .table(\"stat_track_date_hour_pv_uv_ip\")\n			    .where(\"1 = 1\")\n                .and(\"log_date >= ?\", date_start)\n                .and(\"log_date <= ?\", date_end);\nif(vd){\n   selectDb.and(\"vd = ?\", vd);\n}\nif(vi>0){\n   selectDb.and(\"vi = ?\", vi);\n}\nif(url_id==-1||url_id>0){\n   selectDb.and(\"url_id = ?\", url_id);\n}\nif (log_hour<25) {\n   selectDb.and(\"log_hour = ?\", log_hour);\n}\nif(notvd){\n   var arr = notvd.split(\',\');\n   for(var i in arr){\n     selectDb.and(\"vd != ?\", arr[i]);\n   }\n}\nif(inlist){\n   var sql = \'(\';\n   var array = inlist.split(\',\');\n   for(i in array){\n     sql = sql + \' vd = \'+array[i]+\' or\';\n   }\n   sql = sql.substring(0,sql.length-2) +\')\';\n   selectDb.and(sql);\n}\n\nvar list = selectDb.orderBy(\"log_date asc\")\n			    .select(\"*\")\n                .getMapList();\n                \n\nif (list && list.length > 0) {\n  return {code:1,msg:\'success\',list:list};\n} else {\n  return {code:2,msg:\'没有数据\',list:[]};\n}', 'ok', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 13:50:09', '2020-06-15 14:02:31');
INSERT INTO `paas_file` VALUES (127, 0, 'sponge_track', '', '/sponge_track/pui.url', 0, 0, 1, 0, 0, NULL, 'javascript', 'application/json', '//\n// 参数：url_partner_key,tag_id,date?\n//\n\nlet _api = requireX(\'/_funs/_api.clz\');\n\n\nif(!_api.checkParamsIsOk(ctx,[\"url_partner_key\",\"tag_id\"])){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.checkParamsIsNot0(ctx,[\"tag_id\"])){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.ip_isWhitelist(ctx)){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nvar upkey  = ctx.pram(\"url_partner_key\");\nvar tag_id = ctx.pramAsInt(\"tag_id\");\nvar date   = ctx.pramAsInt(\"date\");\n\n\nvar db_cfg = \"sponge/sponge_track\";\n\nvar surl = water.db(db_cfg).exe(`map::SELECT * FROM short_url WHERE tag_id = ${tag_id} AND url_partner_key = \'${upkey}\'`);\n\n\nvar tb = water.db(db_cfg).table(\'stat_date_hour_pv_uv_ip\')\n                   .where(\'url_id=? AND tag_id=? AND log_hour=-1\',surl.url_id,tag_id);\n\nif(date>0){ \n    tb.and(\'log_date=?\',date);\n}\n\nvar list = tb.select(\'url_id,pv,uv,ip,log_date\').getMapList();\n\nlist.forEach(m=>{\n  m.url_name = surl.url_name;\n  m.url_partner_key = surl.url_partner_key;\n});\n\nreturn {code:1,msg:\'success\',data:list};', 'ok', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 13:50:25', '2020-06-15 14:05:58');
INSERT INTO `paas_file` VALUES (128, 0, 'sponge_track', '', '/sponge_track/short.url.partner.key.get', 0, 0, 1, 0, 0, NULL, 'javascript', 'application/json', '//\n// 参数：\n//\n\nlet _api = requireX(\'/_funs/_api.clz\');\n\n\n\nif(!_api.checkParamsIsOk(ctx,[\"url_key\"])){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nvar url_key = ctx.param(\"url_key\");\n\n\nvar surl = water.db(\"sponge/sponge_track\").table(\"short_url\")\n                .where(\"url_key = ?\", url_key)\n                .select(\"url_partner_key\")\n                .getValue();\n\nreturn {code:1, msg:\'success\', data:surl};', 'ok', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 13:50:36', '2020-06-15 14:07:07');
INSERT INTO `paas_file` VALUES (129, 0, 'sponge_track', '', '/sponge_track/url.add', 0, 0, 1, 0, 0, NULL, 'javascript', 'application/json', '//\n// 参数：url_partner_key,url_name,tag_id,tag_access_key\n//\n\nlet _api = requireX(\'/_funs/_api.clz\');\nlet _tool = requireX(\'/sponge_track/_tool.lib\');\n\n\nif (!_api.checkParamsIsOk(ctx,[\"url_partner_key\",\"url_name\",\"tag_id\",\"tag_access_key\"])) {\n	return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.checkParamsIsNot0(ctx,[\"tag_id\"])){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.ip_isWhitelist(ctx)){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nvar tag_access_key  = ctx.param(\"tag_access_key\");\nvar tag_id          = ctx.paramAsInt(\"tag_id\",0);\nvar build_link      = ctx.param(\"build_link\");\n\nif (build_link) {\n  if (_tool.checkBuildLink(build_link) === false) {\n    return {code:6,msg:\"构建链接格式不正确\"};\n  }\n}\n\nvar tag = water.db(\"sponge/sponge_track\").table(\"track_tag\")\n			.where(\"tag_id = ?\",tag_id).and(\"tag_access_key = ?\",tag_access_key)\n			.select(\"*\")\n			.getMap();\n\n\nif (tag.tag_id === 0) {\n  return {code:5,msg:\"tag_access_key错误\"};\n}else {\n  var oNode = _tool.addShortUrlApi(ctx); \n\n  if (oNode.url) {\n    return {code:1,msg:\"success\",data:oNode};\n  }else{\n    return {code:4,msg:\"源网址已是短地址格式\"};\n  }\n}\n\n', 'ok', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 13:50:47', '2020-09-09 18:35:38');
INSERT INTO `paas_file` VALUES (130, 0, 'sponge_track', '', '/sponge_track/url.get.by.tag.pk', 0, 0, 1, 0, 0, NULL, 'javascript', 'application/json', '//\n// 参数：tag_id,url_partner_key\n//\n\nlet _api = requireX(\'/_funs/_api.clz\');\n\n\nif (!_api.checkParamsIsOk(ctx,[\"url_partner_key\",\"tag_id\"])) {\n	return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.checkParamsIsNot0(ctx,[\"tag_id\"])){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nvar tag_id          = ctx.paramAsInt(\"tag_id\");\nvar url_partner_key = ctx.paramAsInt(\"url_partner_key\");\n\nvar obj = water.db(\"sponge/sponge_track\").table(\"short_url\")\n            .where(\"tag_id = ?\",tag_id).and(\"url_partner_key = ?\",url_partner_key)\n            .select(\"*\")\n            .getMap();\n\nreturn {code:1,msg:\"success\",data:obj};', 'ok', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 13:50:58', '2020-06-15 14:27:27');
INSERT INTO `paas_file` VALUES (131, 0, 'sponge_track', '', '/sponge_track/url.pui.get', 0, 0, 1, 0, 0, NULL, 'javascript', 'application/json', '//\n// 参数：tag_id,url_ids,date\n//\n\nlet _api = requireX(\'/_funs/_api.clz\');\n\nif(!_api.checkParamsIsNot0(ctx,[\"tag_id\",\"date_start\",\"date_end\"])){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nlet tag_id      = ctx.pramAsInt(\"tag_id\");\nlet date_start  = ctx.pram(\"date_start\");\nlet date_end    = ctx.pram(\"date_end\");\nlet url_ids     = ctx.pram(\"url_ids\")+\"\";\n\nlet selectDb = water.db(\"sponge/sponge_track\")\n                .table(\"stat_date_hour_pv_uv_ip\")\n			    .where(\"log_hour = -1\")\n                .and(\"tag_id = ?\", tag_id)\n                .and(\"log_date >= ?\", date_start)\n                .and(\"log_date <= ?\", date_end);\n\nif(url_ids){\n   let sql = \'(\';\n   let array = url_ids.split(\',\');\n   \n   for(let i in array){\n     sql = sql + \' url_id = \'+array[i]+\' or\';\n   }\n   \n   sql = sql.substring(0,sql.length-2) +\')\';\n   selectDb.and(sql);\n}\n\nlet list = selectDb.select(\"*\")\n                .getMapList();              \n                \nif (list && list.length > 0) {\n  return {code:1,msg:\'success\',list:list};\n} else {\n  return {code:2,msg:\'没有数据\',list:[]};\n}', 'ok', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 13:51:09', '2020-06-15 14:30:35');
INSERT INTO `paas_file` VALUES (132, 0, 'sponge_track', '', '/sponge_track/url.update.by.tag.pk', 0, 0, 1, 0, 0, NULL, 'javascript', 'application/json', '//\n// 参数：tag_id,url_partner_key,url_val\n//\n\nlet _api = requireX(\'/_funs/_api.clz\');\n\n\nif (!_api.checkParamsIsOk(ctx,[\"url_partner_key\",\"url_val\",\"tag_id\"])) {\n	return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nif(!_api.checkParamsIsNot0(ctx,[\"tag_id\"])){\n  return {code:ctx.attrMap().code, msg:ctx.attrMap().msg};\n}\n\nvar tag_id          = ctx.pram(\"tag_id\");\nvar url_partner_key = ctx.pramAsInt(\"url_partner_key\");\nvar url_val         = ctx.pram(\"url_val\");\n\nvar url_val_md5 = XUtil.md5(url_val);\n\nwater.db(\"sponge/sponge_track\").table(\"short_url\")\n            .where(\"tag_id = ?\",tag_id)\n            .and(\"url_partner_key = ?\",url_partner_key)\n			.set(\"url_val_md5\", url_val_md5)\n			.set(\"url_val\", url_val)\n            .set(\"update_time\", \"$NOW()\")\n            .update();\n\nreturn {code:1,msg:\"success\"};', 'ok', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 13:51:19', '2020-06-15 14:32:05');
INSERT INTO `paas_file` VALUES (133, 0, 'sponge_track', '', '/sponge_track/_tool.lib', 0, 0, 1, 0, 0, NULL, 'javascript', 'code/internal', 'this.addShortUrlApi = function(ctx){\n    var prefix = water.cfg(\'sponge/track_uri\').value;\n    \n    var tag_id          = ctx.paramAsInt(\"tag_id\",0);\n    var tag_access_key  = ctx.param(\"tag_access_key\");\n    var url_partner_key = ctx.param(\"url_partner_key\");\n    var url_name        = ctx.param(\"url_name\");\n    var url_val         = ctx.param(\"url_val\");\n    var track_params    = ctx.param(\"track_params\");\n    var trans_params    = ctx.param(\"trans_params\");\n    var user_field      = ctx.param(\"user_field\");\n    var build_link      = ctx.param(\"build_link\");\n    var note            = ctx.param(\"note\");\n    \n    if (url_val && url_val.indexOf(prefix) >= 0) { \n      return {};\n    } \n    \n    var dbx = water.db(\"sponge/sponge_track\");\n    \n    /*db2json 转成json对象*/\n    var shortUrl = dbx.table(\"short_url\")\n    			      .where(\"tag_id = ?\",tag_id).and(\"url_partner_key = ?\",url_partner_key)\n    			      .select(\"*\")\n    			      .getMap();\n    \n    var url_id = shortUrl.url_id;\n    var trackParamsNum = 0;\n    var tag = dbx.table(\"track_tag\")\n    			.where(\"tag_id = ?\",tag_id)\n    			.select(\"*\")\n    			.getMap();\n    \n    var tag_host = tag.tag_host;\n    if(tag_host){\n       if(tag_host.substr(-1)!=\'/\'){\n    	  tag_host = tag_host + \'/\';\n       }\n       prefix = tag_host;\n    }\n    var dbQueryUpdate = dbx.table(\"short_url\")\n    			.set(\"tag_id\", tag_id)\n    			.set(\"url_partner_key\", url_partner_key)\n    			.set(\"url_name\",url_name)\n                .set(\"update_time\", \"$NOW()\");\n\n    if(track_params) {\n        trackParamsNum = track_params.split(\',\').length;\n        dbQueryUpdate.set(\"track_params\", track_params)\n    			.set(\"track_params_num\", trackParamsNum);\n    } else{\n    	track_params = tag.t_track_params;\n\n       if(track_params){\n    	  trackParamsNum = track_params.split(\',\').length;\n    	 }\n    }\n    \n    if(!trans_params) { \n        trans_params = tag.t_trans_params;\n    } else {\n        dbQueryUpdate.set(\"trans_params\", trans_params);\n    }\n    \n    if(!user_field) { \n        user_field = tag.t_user_field;\n    } else {\n       dbQueryUpdate.set(\"user_field\",user_field);\n    }\n    \n    if(!build_link) { \n        build_link = tag.t_build_link;\n    } else {\n        dbQueryUpdate.set(\"build_link\",build_link);\n    }\n    \n    var url_md5 = \'\';\n    if(url_val) { \n        url_md5 = XUtil.md5(url_val);\n        dbQueryUpdate.set(\"url_val\", url_val)\n                     .set(\"url_val_md5\", url_md5);\n    }\n    XUtil.log(track_params+\"a1,\"+trackParamsNum+\"a2,\"+trans_params+\"a3\");\n    var dbQuery = dbx.table(\"short_url\")\n    			.set(\"tag_id\", tag_id)\n    			.set(\"url_partner_key\", url_partner_key)\n    			.set(\"url_name\",url_name)\n    			.set(\"url_val_md5\", url_md5)\n    			.set(\"url_val\", url_val)\n    			.set(\"track_params\", track_params)\n    			.set(\"track_params_num\", trackParamsNum)\n    			.set(\"trans_params\", trans_params)\n    			.set(\"user_field\",user_field)\n    			.set(\"build_link\",build_link)\n                .set(\"update_time\", \"$NOW()\");\n    \n    if(!url_id){ \n       /*公共函数调用  tag名_函数名*/\n       url_id = this.getUrlID();\n       var url_key = this.getCodeByID(url_id);\n       \n    	dbQuery.set(\"url_id\", url_id)\n    	      .set(\"create_fulltime\", \"$NOW()\")\n    	      .set(\"url_key\", url_key)\n             .set(\"note\",note)\n    	      .insert();\n    	\n    	dbx.table(\"short_url_ex_stat\")\n    			.set(\"url_id\", url_id)\n    			.set(\"tag_id\", tag_id)\n    			.insert();\n    			\n    	 return {\'url\':prefix+url_key,\'url_id\':url_id};\n    }else{\n    	dbQueryUpdate.where(\"url_id = ?\", url_id).update();\n    	return {\'url\':prefix+shortUrl.url_key,\'url_id\':url_id};\n    }\n}\n\n\nthis.checkBuildLink = function(build_link){\n    if(!build_link || build_link.indexOf(\'::\')<0){\n      return false;\n    }\n    \n    return true;\n}\n\nthis.getCodeByID = function(id){\n    var key = 999999999;\n    id = id + key;\n    id = id - (key / 100);\n    id = id + (key / 10000);\n    id = id - (key / 1000000);\n    id = parseInt(id + 2);\n    \n    return id.toString(36);\n}\n\nthis.getShortUrlByPartnerKey = function(url_partner_key,tag_id){\n    return water.db(\'sponge/sponge_track\')\n                .exe(`map::SELECT * FROM short_url WHERE url_partner_key=${url_partner_key} AND tag_id=${tag_id}`);\n}\n\nthis.getTag = function(tag_id){\n    return water.db(\'sponge/sponge_track\')\n                .exe(`map::SELECT * FROM track_tag WHERE tag_id=${tag_id}`);\n}\n\nthis.getUrlID = function(){\n    return rock.client.newID(\'SPONGE_ID\',\'url_id\',60 * 60 * 24 * 365) + 1000000;\n}\n\n', '', 0, NULL, NULL, 0, '', 0, 0, '2020-06-15 14:09:17', '2020-09-09 18:41:09');
INSERT INTO `paas_file` VALUES (164, 1, 'sponge_track', '', '/sponge_track/del_stat_360d', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'sponge/sponge_track\');\n\nvar date = Datetime.Now().addDay(-360).getDate();  //SELECT DATE_FORMAT(DATE_ADD(NOW(),INTERVAL -360 DAY),\'%Y%m%d\')\nvar date2 = Datetime.Now().addDay(-90).getDate(); //SELECT DATE_FORMAT(DATE_ADD(NOW(),INTERVAL -90 DAY),\'%Y%m%d\')\n\ndb2.exe(`DELETE FROM stat_city_date_pv_uv_ip WHERE log_date <?`, date);\ndb2.exe(`DELETE FROM stat_ua_client_date_pv_uv_ip WHERE log_date <?`, date);\ndb2.exe(`DELETE FROM stat_ua_platform_date_pv_uv_ip WHERE log_date <?`, date);\n\n\ndb2.exe(`DELETE FROM stat_date_hour_pv_uv_ip WHERE log_date <?  AND log_hour>=0`, date2);\n\ndb2.exe(`DELETE FROM stat_track_date_hour_pv_uv_ip WHERE log_date <?`, date2);\n\nreturn \"OK\";\n', '删除超360天的统计数据', 9, '2020-06-14 00:00:00', '2021-03-18 00:00:00', 107, '1d', 0, 268, '2020-06-15 11:39:28', '2020-08-19 11:54:31');
INSERT INTO `paas_file` VALUES (165, 1, 'sponge_track', '', '/sponge_track/del_track_log_30d', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'sponge/sponge_track\');\n\nvar date = Datetime.Now().addDay(-30).getDate(); //SELECT DATE_FORMAT(DATE_ADD(NOW(),INTERVAL -30 DAY),\'%Y%m%d\')\n\ndb2.exe(`DELETE FROM short_redirect_log_30d WHERE log_date <= ?`, date);\n\nreturn \'OK\';', '删除超30天的日志数据', 9, '2020-06-14 00:00:00', '2021-03-18 00:00:00', 22, '1d', 0, 266, '2020-06-15 11:42:45', '2020-08-19 11:54:56');
INSERT INTO `paas_file` VALUES (166, 1, 'sponge_track', '', '/sponge_track/ip_city_code0', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'sponge/sponge_track\');\n\n//\n// old::APPCODE 42a57d3dd8c543a291ff9d5a06a4fb77\n//\n// new::APPCODE ae5df0d8a5ed4b81bf8b3fe50e292055\n//\nfunction doItem(item){\n	var txt  = XUtil.http(\"http://iploc.market.alicloudapi.com/v3/ip?ip=\"+item.ip_val).header(\"Authorization\",\"APPCODE ae5df0d8a5ed4b81bf8b3fe50e292055\").get();\n	var ipx = JSON.parse(txt);\n	\n	if(typeof(ipx.adcode) == \'string\'){\n		db2.exe(`UPDATE code_ip SET city_name=?,city_code=?,is_checked=1 WHERE ip_id =?`, ipx.city, ipx.adcode, item.ip_id);\n	}else{\n		db2.exe(`UPDATE code_ip SET is_checked = 1 WHERE ip_id = ?`, item.ip_id);\n	}\n}\n\n\nlet list = db2.exe(`list::SELECT * FROM code_ip WHERE city_code=0 AND is_checked=0 AND MOD(ip_id,5)=0 LIMIT 1000`);\n\nif(list && list.length){\n	for(var i in list){\n		var item = list[i];\n		doItem(item);\n	}\n}\n\nreturn \'OK\';', '根据IP获取城市码-任务0', 9, '2020-06-15 11:53:27', '2021-03-18 15:37:30', 3268, '10m', 0, 33453, '2020-06-15 11:46:52', '2020-08-19 11:56:12');
INSERT INTO `paas_file` VALUES (167, 1, 'sponge_track', '', '/sponge_track/ip_city_code1', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'sponge/sponge_track\');\n\nfunction doItem(item){\n	var txt  = XUtil.http(\"http://iploc.market.alicloudapi.com/v3/ip?ip=\"+item.ip_val).header(\"Authorization\",\"APPCODE 42a57d3dd8c543a291ff9d5a06a4fb77\").get();\n	var ipx = JSON.parse(txt);\n	\n	if(typeof(ipx.adcode) == \'string\'){\n		db2.exe(`UPDATE code_ip SET city_name=?,city_code=?,is_checked=1 WHERE ip_id =?`, ipx.city, ipx.adcode, item.ip_id);\n	}else{\n		db2.exe(`UPDATE code_ip SET is_checked = 1 WHERE ip_id = ?`, item.ip_id);\n	}\n}\n\n\nlet list = db2.exe(`list::SELECT * FROM code_ip WHERE city_code=0 AND is_checked=0 AND MOD(ip_id,5)=1 LIMIT 1000`);\n\nif(list && list.length){\n	for(var i in list){\n		var item = list[i];\n		doItem(item);\n	}\n}\n\nreturn \'OK\';', '根据IP获取城市码-任务1', 9, '2020-06-15 11:53:37', '2021-03-18 15:37:36', 10, '10m', 0, 33419, '2020-06-15 11:47:16', '2020-08-19 11:57:00');
INSERT INTO `paas_file` VALUES (168, 1, 'sponge_track', '', '/sponge_track/ip_city_code2', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'sponge/sponge_track\');\n\nfunction doItem(item){\n	var txt  = XUtil.http(\"http://iploc.market.alicloudapi.com/v3/ip?ip=\"+item.ip_val).header(\"Authorization\",\"APPCODE 42a57d3dd8c543a291ff9d5a06a4fb77\").get();\n	var ipx = JSON.parse(txt);\n	\n	if(typeof(ipx.adcode) == \'string\'){\n		db2.exe(`UPDATE code_ip SET city_name=?,city_code=?,is_checked=1 WHERE ip_id =?`, ipx.city, ipx.adcode, item.ip_id);\n	}else{\n		db2.exe(`UPDATE code_ip SET is_checked = 1 WHERE ip_id = ?`, item.ip_id);\n	}\n}\n\n\nlet list = db2.exe(`list::SELECT * FROM code_ip WHERE city_code=0 AND is_checked=0 AND MOD(ip_id,2)=0 LIMIT 1000`);\n\nif(list && list.length){\n	for(var i in list){\n		var item = list[i];\n		doItem(item);\n	}\n}\n\nreturn \'OK\';', '根据IP获取城市码-任务2', 9, '2020-06-15 11:53:44', '2021-03-18 15:39:47', 2863, '10m', 0, 33340, '2020-06-15 11:47:26', '2020-08-19 11:57:07');
INSERT INTO `paas_file` VALUES (169, 1, 'sponge_track', '', '/sponge_track/ip_city_code3', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'sponge/sponge_track\');\n\nfunction doItem(item){\n	var txt  = XUtil.http(\"http://iploc.market.alicloudapi.com/v3/ip?ip=\"+item.ip_val).header(\"Authorization\",\"APPCODE 42a57d3dd8c543a291ff9d5a06a4fb77\").get();\n	var ipx = JSON.parse(txt);\n	\n	if(typeof(ipx.adcode) == \'string\'){\n		db2.exe(`UPDATE code_ip SET city_name=?,city_code=?,is_checked=1 WHERE ip_id =?`, ipx.city, ipx.adcode, item.ip_id);\n	}else{\n		db2.exe(`UPDATE code_ip SET is_checked = 1 WHERE ip_id = ?`, item.ip_id);\n	}\n}\n\n\nlet list = db2.exe(`list::SELECT * FROM code_ip WHERE city_code=0 AND is_checked=0 AND MOD(ip_id,5)=3 LIMIT 1000`);\n\nif(list && list.length){\n	for(var i in list){\n		var item = list[i];\n		doItem(item);\n	}\n}\n\nreturn \'OK\';', '根据IP获取城市码-任务3', 9, '2020-06-15 11:53:51', '2021-03-18 15:39:50', 9, '10m', 0, 33261, '2020-06-15 11:47:34', '2020-08-19 11:57:12');
INSERT INTO `paas_file` VALUES (170, 1, 'sponge_track', '', '/sponge_track/ip_city_code4', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'sponge/sponge_track\');\n\nfunction doItem(item){\n	var txt  = XUtil.http(\"http://iploc.market.alicloudapi.com/v3/ip?ip=\"+item.ip_val).header(\"Authorization\",\"APPCODE 42a57d3dd8c543a291ff9d5a06a4fb77\").get();\n	var ipx = JSON.parse(txt);\n	\n	if(typeof(ipx.adcode) == \'string\'){\n		db2.exe(`UPDATE code_ip SET city_name=?,city_code=?,is_checked=1 WHERE ip_id =?`, ipx.city, ipx.adcode, item.ip_id);\n	}else{\n		db2.exe(`UPDATE code_ip SET is_checked = 1 WHERE ip_id = ?`, item.ip_id);\n	}\n}\n\n\nlet list = db2.exe(`list::SELECT * FROM code_ip WHERE city_code=0 AND is_checked=0 AND MOD(ip_id,5)=4 LIMIT 1000`);\n\nif(list && list.length){\n	for(var i in list){\n		var item = list[i];\n		doItem(item);\n	}\n}\n\nreturn \'OK\';', '根据IP获取城市码-任务4', 9, '2020-06-15 11:53:57', '2021-03-18 15:33:01', 13, '10m', 0, 32074, '2020-06-15 11:47:47', '2020-08-19 11:57:22');
INSERT INTO `paas_file` VALUES (171, 1, 'sponge_track', '', '/sponge_track/notice_stat', 0, 0, 1, 1, 0, NULL, 'javascript', '', 'var date1  = Datetime.Now().addDay(-1).getDate(); //SELECT DATE_FORMAT(DATE_ADD(NOW(),INTERVAL -1 DAY),\'%Y%m%d\')\n\n// XUtil.http(\"http://water.zmapi.cn/msg/send/\")\n//      .data(\"key\",XUtil.guid())\n//      .data(\"topic\",\"sponge.stat.notice\")\n//      .data(\"message\",date1)\n//      .post();\n\n\nwater.sendMessage(\"sponge.stat.notice\", date1+\'\');\n\nreturn \'OK\';', '定时发现统计通知（由别人去统计）', 9, '2020-06-15 12:43:03', '2021-01-22 23:16:04', 8, '10m', 0, 26349, '2020-06-15 11:54:38', '2020-06-15 12:00:44');
INSERT INTO `paas_file` VALUES (172, 1, 'sponge_track', '', '/sponge_track/stat_city', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'sponge/sponge_track\');\n\nlet date1  = new Datetime().getDate();\n\n\ndb2.exe(`UPDATE short_redirect_log_30d l, code_ip u\nSET l.log_city_code = (u.city_code/10000)*10000\nWHERE l.log_city_code=0 AND l.log_ip_id = u.ip_id AND u.city_code>0`);\n\n\ndb2.exe(`DELETE FROM stat_city_date_pv_uv_ip WHERE log_date = ?`, date1);\n\n\ndb2.exe(`INSERT INTO stat_city_date_pv_uv_ip(url_id,tag_id,province_code,log_date,pv,uv,ip)\nSELECT -1,tag_id,log_city_code,log_date,COUNT(*) pv,COUNT(DISTINCT user_key) uv,COUNT(DISTINCT log_ip_id) ip\nFROM short_redirect_log_30d \nWHERE log_date = ?\nGROUP BY tag_id,log_city_code`, date1);\n\n\ndb2.exe(`INSERT INTO stat_city_date_pv_uv_ip(url_id,tag_id,province_code,log_date,pv,uv,ip)\nSELECT url_id,tag_id,log_city_code,log_date,COUNT(*) pv,COUNT(DISTINCT user_key) uv,COUNT(DISTINCT log_ip_id) ip\nFROM short_redirect_log_30d \nWHERE log_date = ?\nGROUP BY url_id,log_city_code`, date1);\n\n\n/* update uv2 */\ndb2.exe(`UPDATE stat_city_date_pv_uv_ip t,(\n		SELECT tag_id,province_code,log_date,SUM(uv) uv2 \n		FROM stat_city_date_pv_uv_ip \n		WHERE log_date= ? AND url_id<>-1\n		GROUP BY tag_id,province_code,log_date\n) t2\nSET t.uv2 = t2.uv2\nWHERE t.tag_id = t2.tag_id AND t.province_code = t2.province_code AND t.log_date = t2.log_date AND t.url_id=-1`, date1);\n\nreturn \'OK\';\n', '统计城市数据', 9, '2020-06-15 12:43:09', '2021-03-18 15:42:20', 5907, '5m', 0, 66714, '2020-06-15 12:10:43', '2020-08-19 11:58:51');
INSERT INTO `paas_file` VALUES (173, 1, 'sponge_track', '', '/sponge_track/stat_ua_client', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'sponge/sponge_track\');\n\n\nvar date1  = new Datetime().getDate();\n\n\ndb2.exe(`DELETE FROM stat_ua_client_date_pv_uv_ip WHERE log_date = ?`, date1);\n\n\ndb2.exe(`INSERT INTO stat_ua_client_date_pv_uv_ip(url_id,tag_id,ua_client,log_date,pv,uv,ip)\nSELECT -1,s.tag_id,u.client,log_date,COUNT(*) pv,COUNT(DISTINCT s.user_key) uv,COUNT(DISTINCT s.log_ip_id) ip\nFROM short_redirect_log_30d s INNER JOIN code_ua u ON s.log_ua_id=u.ua_id\nWHERE s.log_date = ?\nGROUP BY s.tag_id,u.client`, date1);\n\n\ndb2.exe(`INSERT INTO stat_ua_client_date_pv_uv_ip(url_id,tag_id,ua_client,log_date,pv,uv,ip)\nSELECT s.url_id,s.tag_id,u.client,log_date,COUNT(*) pv,COUNT(DISTINCT s.user_key) uv,COUNT(DISTINCT s.log_ip_id) ip\nFROM short_redirect_log_30d s INNER JOIN code_ua u ON s.log_ua_id=u.ua_id\nWHERE s.log_date = ?\nGROUP BY s.url_id,u.client`, date1);\n\n/* update uv2 */\ndb2.exe(`UPDATE stat_ua_client_date_pv_uv_ip t,(\n		SELECT tag_id,ua_client,log_date,SUM(uv) uv2 \n		FROM stat_ua_client_date_pv_uv_ip \n		WHERE log_date= ? AND url_id<>-1\n		GROUP BY tag_id,ua_client,log_date\n) t2\nSET t.uv2 = t2.uv2\nWHERE t.tag_id = t2.tag_id AND t.ua_client = t2.ua_client AND t.log_date = t2.log_date AND t.url_id=-1`, date1);\n\nreturn \'OK\';\n', '统计客户端UA数据', 9, '2020-06-15 12:43:14', '2021-03-18 15:42:17', 8925, '5m', 0, 66706, '2020-06-15 12:10:57', '2020-08-19 11:59:56');
INSERT INTO `paas_file` VALUES (174, 1, 'sponge_track', '', '/sponge_track/stat_ua_platform', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'sponge/sponge_track\');\n\nvar date1  = new Datetime().getDate();\n\n\ndb2.exe(`DELETE FROM stat_ua_platform_date_pv_uv_ip WHERE log_date = ?`, date1);\n\n\ndb2.exe(`INSERT INTO stat_ua_platform_date_pv_uv_ip(url_id,tag_id,ua_platform,log_date,pv,uv,ip)\nSELECT -1,s.tag_id,u.platform,log_date,COUNT(*) pv,COUNT(DISTINCT s.user_key) uv,COUNT(DISTINCT s.log_ip_id) ip\nFROM short_redirect_log_30d s INNER JOIN code_ua u ON s.log_ua_id=u.ua_id\nWHERE s.log_date = ?\nGROUP BY s.tag_id,u.platform`, date1);\n\n\ndb2.exe(`INSERT INTO stat_ua_platform_date_pv_uv_ip(url_id,tag_id,ua_platform,log_date,pv,uv,ip)\nSELECT s.url_id,s.tag_id,u.platform,log_date,COUNT(*) pv,COUNT(DISTINCT s.user_key) uv,COUNT(DISTINCT s.log_ip_id) ip\nFROM short_redirect_log_30d s INNER JOIN code_ua u ON s.log_ua_id=u.ua_id\nWHERE s.log_date = ?\nGROUP BY s.url_id,u.platform`, date1);\n\n\n/* update uv2 */\ndb2.exe(`UPDATE stat_ua_platform_date_pv_uv_ip t,(\n		SELECT tag_id,ua_platform,log_date,SUM(uv) uv2 \n		FROM stat_ua_platform_date_pv_uv_ip \n		WHERE log_date= ? AND url_id<>-1\n		GROUP BY tag_id,ua_platform,log_date\n) t2\nSET t.uv2 = t2.uv2\nWHERE t.tag_id = t2.tag_id AND t.ua_platform = t2.ua_platform AND t.log_date = t2.log_date AND t.url_id=-1`, date1);\n\nreturn \'OK\';\n', '统计平台UA数据', 9, '2020-06-15 12:43:19', '2021-03-18 15:42:23', 2822, '5m', 0, 66712, '2020-06-15 12:11:08', '2020-08-19 12:09:11');
INSERT INTO `paas_file` VALUES (175, 1, 'sponge_track', '', '/sponge_track/stat_url', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'sponge/sponge_track\');\n\n\nlet date1  = Datetime.Now().addDay(-1).getDate(); //$<SELECT DATE_FORMAT(DATE_ADD(NOW(),INTERVAL -1 DAY),\'%Y%m%d\')\nlet date30 = Datetime.Now().addDay(-30).getDate(); //$<SELECT DATE_FORMAT(DATE_ADD(NOW(),INTERVAL -30 DAY),\'%Y%m%d\')\nlet date0  = Datetime.Now().getDate(); //$<SELECT DATE_FORMAT(NOW(),\'%Y%m%d\')\nlet dateX  = 0;\nlet hour0  = Datetime.Now().getHours();\n\n\nif(hour0>=4){\n  dateX = date0;\n}else{\n  dateX = date1;\n}\n\ndb2.exe(`DELETE FROM stat_date_hour_pv_uv_ip WHERE log_date>=?`, dateX);\n\nfunction stat_url() {\n\n	/*统计典线图：日数据*/\n	db2.exe(`INSERT INTO stat_date_hour_pv_uv_ip(url_id,tag_id,log_date,log_hour,pv,uv,ip)\n		SELECT url_id,tag_id,log_date,-1, COUNT(*) pv,COUNT(DISTINCT user_key) uv,COUNT(DISTINCT log_ip_id) ip\n		FROM short_redirect_log_30d \n		WHERE log_date>=?\n		GROUP BY url_id,log_date`, dateX);\n\n    db2.exe(`INSERT INTO stat_date_hour_pv_uv_ip(url_id,tag_id,log_date,log_hour,pv,uv,ip)\n		SELECT -1,tag_id,log_date,-1, COUNT(*) pv,COUNT(DISTINCT user_key) uv,COUNT(DISTINCT log_ip_id) ip\n		FROM short_redirect_log_30d \n		WHERE log_date>=?\n		GROUP BY tag_id,log_date`, dateX);\n		\n	/*update date uv2*/\n	db2.exe(`UPDATE stat_date_hour_pv_uv_ip t,(\n		SELECT tag_id,log_date,SUM(uv) uv2 \n		FROM stat_date_hour_pv_uv_ip \n		WHERE log_date>= ? AND log_hour=-1 AND url_id<>-1\n		GROUP BY tag_id,log_date\n        ) t2\n      SET t.uv2 = t2.uv2\n      WHERE t.tag_id = t2.tag_id AND t.log_date = t2.log_date AND t.log_hour=-1 AND t.url_id=-1`, dateX);\n	  \n\n	/*统计典线图：小时数据*/\n    db2.exe(`INSERT INTO stat_date_hour_pv_uv_ip(url_id,tag_id,log_date,log_hour,pv,uv,ip)\n		SELECT url_id,tag_id,log_date, log_hour,COUNT(*) pv,COUNT(DISTINCT user_key) uv,COUNT(DISTINCT log_ip_id) ip\n		FROM short_redirect_log_30d \n		WHERE log_date>=?\n		GROUP BY url_id,log_date,log_hour`, dateX);\n\n    db2.exe(`INSERT INTO stat_date_hour_pv_uv_ip(url_id,tag_id,log_date,log_hour,pv,uv,ip)\n		SELECT -1,tag_id,log_date, log_hour,COUNT(*) pv,COUNT(DISTINCT user_key) uv,COUNT(DISTINCT log_ip_id) ip\n		FROM short_redirect_log_30d \n		WHERE log_date>=?\n		GROUP BY tag_id,log_date,log_hour`, dateX);\n		\n	/*update hour uv2*/\n	db2.exe(`UPDATE stat_date_hour_pv_uv_ip t,(\n		SELECT tag_id,log_date,log_hour,SUM(uv) uv2 \n		FROM stat_date_hour_pv_uv_ip \n		WHERE log_date>= ? AND log_hour<>-1 AND url_id<>-1\n		GROUP BY tag_id,log_date,log_hour\n        ) t2\n      SET t.uv2 = t2.uv2\n      WHERE t.tag_id = t2.tag_id AND t.log_date = t2.log_date AND t.log_hour=t2.log_hour AND t.url_id=-1`, dateX);\n}\n\nfunction stat_url_sum(){\n	/*总量统计：url记录昨日数据*/\n	db2.exe(`UPDATE short_url_ex_stat SET uv_yesterday=0,pv_yesterday=0,ip_yesterday=0 WHERE 1=1`);\n	\n	db2.exe(`UPDATE short_url_ex_stat se, stat_date_hour_pv_uv_ip ss\n	SET se.uv_yesterday = ss.uv, se.pv_yesterday = ss.pv, se.ip_yesterday = ss.ip\n	WHERE se.url_id = ss.url_id AND ss.log_date=? AND ss.log_hour=-1 AND ss.url_id>0`, date1);\n	\n	/*总量统计：url记录今日数据*/\n	db2.exe(`UPDATE short_url_ex_stat SET uv_today=0,pv_today=0,ip_today=0 WHERE 1=1`);\n	\n	db2.exe(`UPDATE short_url_ex_stat se, stat_date_hour_pv_uv_ip ss\n	SET se.uv_today = ss.uv, se.pv_today = ss.pv, se.ip_today = ss.ip\n	WHERE se.url_id = ss.url_id AND ss.log_date=? AND ss.log_hour=-1 AND ss.url_id>0`, date0);\n\n	/*总量统计：url合计总数*/\n	db2.exe(`TRUNCATE TABLE _tmp_total_pv_uv_ip`);\n	\n	db2.exe(`INSERT INTO _tmp_total_pv_uv_ip(obj_id,pv,uv,ip)\n	SELECT url_id,SUM(pv) pv, SUM(uv) uv,SUM(ip) ip\n	FROM stat_date_hour_pv_uv_ip WHERE log_date>=? AND log_hour=-1 AND url_id>0 GROUP BY url_id`, date30);\n\n    db2.exe(`UPDATE short_url_ex_stat SET uv_total=0,pv_total=0,ip_total=0 WHERE 1=1`);\n	\n	db2.exe(`UPDATE short_url_ex_stat u, _tmp_total_pv_uv_ip s\n	SET u.pv_total = s.pv, u.uv_total = s.uv, u.ip_total = s.ip\n	WHERE u.url_id = s.obj_id`);\n\n\n\n	/*总量统计：tag记录昨日数据*/\n	db2.exe(`UPDATE track_tag_ex_stat se, stat_date_hour_pv_uv_ip ss\n	SET se.uv_yesterday = ss.uv, se.pv_yesterday = ss.pv, se.ip_yesterday = ss.ip\n	WHERE se.tag_id = ss.tag_id AND ss.log_date=? AND ss.log_hour=-1 AND ss.url_id=-1`, date1);\n	\n	/*总量统计：tag记录今日数据*/\n	db2.exe(`UPDATE track_tag_ex_stat SET uv_today=0,pv_today=0,ip_today=0 WHERE 1=1`);\n	\n	db2.exe(`UPDATE track_tag_ex_stat se, stat_date_hour_pv_uv_ip ss\n	SET se.uv_today = ss.uv, se.pv_today = ss.pv, se.ip_today = ss.ip\n	WHERE se.tag_id = ss.tag_id AND ss.log_date=? AND ss.log_hour=-1 AND ss.url_id=-1`, date0);\n	\n	/*总量统计：tag合计总数*/\n	db2.exe(`TRUNCATE TABLE _tmp_total_pv_uv_ip`);\n	\n	db2.exe(`INSERT INTO _tmp_total_pv_uv_ip(obj_id,pv,uv,ip)\n	SELECT tag_id,SUM(pv) pv, SUM(uv) uv,SUM(ip) ip\n	FROM stat_date_hour_pv_uv_ip WHERE log_date>=? AND log_hour=-1 AND url_id=-1 GROUP BY tag_id`,date30);\n	\n	db2.exe(`UPDATE track_tag_ex_stat u, _tmp_total_pv_uv_ip s\n	SET u.pv_total = s.pv, u.uv_total = s.uv, u.ip_total = s.ip\n	WHERE u.tag_id = s.obj_id`);\n}\n\nstat_url();\nstat_url_sum();\n\nreturn \'OK\';\n', '统计URL数据', 9, '2020-06-15 12:43:25', '2021-03-18 15:41:25', 191, '2m', 0, 166772, '2020-06-15 12:11:24', '2020-08-19 12:03:10');
INSERT INTO `paas_file` VALUES (176, 1, 'sponge_track', '', '/sponge_track/stat_url_track', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'sponge/sponge_track\');\n\nlet date1  = Datetime.Now().addDay(-1).getDate(); //$<SELECT DATE_FORMAT(DATE_ADD(NOW(),INTERVAL -1 DAY),\'%Y%m%d\')\nlet date30 = Datetime.Now().addDay(-30).getDate(); //$<SELECT DATE_FORMAT(DATE_ADD(NOW(),INTERVAL -30 DAY),\'%Y%m%d\')\nlet date0  = Datetime.Now().getDate(); //$<SELECT DATE_FORMAT(NOW(),\'%Y%m%d\')\nlet dateX  = 0;\nlet hour0  = Datetime.Now().getHours();\n\n\nif(hour0>=4){\n  dateX = date0;\n}else{\n  dateX = date1;\n}\n\n\ndb2.exe(`DELETE FROM stat_track_date_hour_pv_uv_ip WHERE log_date>=?`, dateX);\n\nfunction stat_track(i) {\n	/*url*/\n	let url_ids = db2.exe(`list::SELECT url_id FROM short_url WHERE track_params_num>=?`, i).stream().map(m1 => m1.url_id).toArray();\n	\n	if(url_ids){\n		for(let j in url_ids){\n		    db2.exe(`INSERT INTO stat_track_date_hour_pv_uv_ip(url_id,tag_id,log_date,log_hour,vi,vd,uv,pv,ip)\n			SELECT url_id,tag_id,log_date,-1,${i},v${i},COUNT(DISTINCT user_key) uv,COUNT(*) pv,COUNT(DISTINCT log_ip_id) ip\n			FROM short_redirect_log_30d \n			WHERE log_date>=? AND url_id =?\n			GROUP BY url_id,log_date,v${i}`, dateX, url_ids[j]);\n			\n			\n			db2.exe(`INSERT INTO stat_track_date_hour_pv_uv_ip(url_id,tag_id,log_date,log_hour,vi,vd,uv,pv,ip)\n			SELECT url_id,tag_id,log_date,log_hour,${i},v${i},COUNT(DISTINCT user_key) uv,COUNT(*) pv,COUNT(DISTINCT log_ip_id) ip\n			FROM short_redirect_log_30d \n			WHERE log_date>=? AND url_id =?\n			GROUP BY url_id,log_date,log_hour,v${i}`, dateX, url_ids[j]);\n		}\n	}\n\n	/*tag*/\n	let tag_ids = db2.exe(`list::SELECT tag_id FROM track_tag WHERE t_track_params_num>=${i}`).stream().map(m1 => m1.tag_id).toArray();\n	if(tag_ids){\n		for(let j in tag_ids){\n		    db2.exe(`INSERT INTO stat_track_date_hour_pv_uv_ip(url_id,tag_id,log_date,log_hour,vi,vd,uv,pv,ip)\n			SELECT -1,tag_id,log_date,-1,${i},v${i},COUNT(DISTINCT user_key) uv,COUNT(*) pv,COUNT(DISTINCT log_ip_id) ip\n			FROM short_redirect_log_30d \n			WHERE log_date>=? AND tag_id = ?\n			GROUP BY tag_id,log_date,v${i}`, dateX, tag_ids[j]);\n		}\n	}\n}\n\nfunction stat_track_sum(){\n\n	/*url total*/\n	db2.exe(`TRUNCATE short_url_ex_track_stat`);\n	\n	db2.exe(`INSERT INTO short_url_ex_track_stat(url_id,tag_id,vi,vd,uv_total,pv_total,ip_total)\n	SELECT url_id,tag_id,vi,vd,SUM(uv) uv,SUM(pv) pv,SUM(ip) ip \n	FROM stat_track_date_hour_pv_uv_ip \n	WHERE log_date>=? AND log_hour=-1 AND url_id>0\n	GROUP BY url_id,vi,vd`, date30);\n	\n	\n	/*url yesday*/\n	db2.exe(`TRUNCATE _tmp_track_total_pv_uv_ip`);\n	\n	db2.exe(`INSERT INTO _tmp_track_total_pv_uv_ip(obj_id,vi,vd,uv,pv,ip)\n	SELECT url_id,vi,vd,uv,pv,ip FROM stat_track_date_hour_pv_uv_ip \n	WHERE log_date=? AND log_hour=-1 AND url_id>0`, date1);\n	\n	db2.exe(`UPDATE short_url_ex_track_stat s, _tmp_track_total_pv_uv_ip t\n	SET s.uv_yesterday = t.uv, s.pv_yesterday = t.pv, s.ip_yesterday = t.ip\n	WHERE s.url_id = t.obj_id AND s.vi = t.vi AND s.vd = t.vd`);\n	\n	/*url today*/\n	db2.exe(`TRUNCATE _tmp_track_total_pv_uv_ip`);\n	\n	db2.exe(`INSERT INTO _tmp_track_total_pv_uv_ip(obj_id,vi,vd,uv,pv,ip)\n	SELECT url_id,vi,vd,uv,pv,ip FROM stat_track_date_hour_pv_uv_ip \n	WHERE log_date=? AND log_hour=-1 AND url_id>0`, date0);\n	\n	db2.exe(`UPDATE short_url_ex_track_stat s, _tmp_track_total_pv_uv_ip t\n	SET s.uv_today = t.uv, s.pv_today = t.pv, s.ip_today = t.ip\n	WHERE s.url_id = t.obj_id AND s.vi = t.vi AND s.vd = t.vd`);\n	\n	\n	/*tag total*/\n	db2.exe(`TRUNCATE track_tag_ex_track_stat`);\n	\n	db2.exe(`INSERT INTO track_tag_ex_track_stat(tag_id,vi,vd,uv_total,pv_total,ip_total)\n	SELECT tag_id,vi,vd,SUM(uv) uv,SUM(pv) pv,SUM(ip) ip \n	FROM stat_track_date_hour_pv_uv_ip \n	WHERE log_date>=? AND log_hour=-1 AND url_id=-1\n	GROUP BY tag_id,vi,vd`, date30);\n	\n	\n	/*tag yesday*/\n	db2.exe(`TRUNCATE _tmp_track_total_pv_uv_ip`);\n	\n	db2.exe(`INSERT INTO _tmp_track_total_pv_uv_ip(obj_id,vi,vd,uv,pv,ip)\n	SELECT tag_id,vi,vd,uv,pv,ip FROM stat_track_date_hour_pv_uv_ip \n	WHERE log_date=? AND log_hour=-1 AND url_id=-1`, date1);\n	\n	db2.exe(`UPDATE track_tag_ex_track_stat s, _tmp_track_total_pv_uv_ip t\n	SET s.uv_yesterday = t.uv, s.pv_yesterday = t.pv, s.ip_yesterday = t.ip\n	WHERE s.tag_id = t.obj_id AND s.vi = t.vi AND s.vd = t.vd`);\n	\n	/*tag today*/\n	db2.exe(`TRUNCATE _tmp_track_total_pv_uv_ip`);\n	\n	db2.exe(`INSERT INTO _tmp_track_total_pv_uv_ip(obj_id,vi,vd,uv,pv,ip)\n	SELECT tag_id,vi,vd,uv,pv,ip FROM stat_track_date_hour_pv_uv_ip \n	WHERE log_date=? AND log_hour=-1 AND url_id=-1`, date0);\n	\n	db2.exe(`UPDATE track_tag_ex_track_stat s, _tmp_track_total_pv_uv_ip t\n	SET s.uv_today = t.uv, s.pv_today = t.pv, s.ip_today = t.ip\n	WHERE s.tag_id = t.obj_id AND s.vi = t.vi AND s.vd = t.vd`);\n}\n\nstat_track(1);\nstat_track(2);\nstat_track(3);\nstat_track(4);\nstat_track(5);\n\nstat_track_sum();\n\nreturn \'OK\';\n\n', '统计URL跟踪数据', 9, '2020-06-15 12:43:31', '2021-03-18 15:17:31', 529, '30m', 0, 11126, '2020-06-15 12:11:41', '2020-08-19 12:13:02');
INSERT INTO `paas_file` VALUES (177, 1, 'sponge_track', '', '/sponge_track/udp_user_agen_p_c', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'sponge/sponge_track\');\n\nvar begin_id = 0;\n\nvar list1 = db2.exe(`list::SELECT * FROM code_enum WHERE type=1 AND keyword<>\'\'`);\nvar list2 = db2.exe(`list::SELECT * FROM code_enum WHERE type=2 AND keyword<>\'\'`);\n\n/*生成平台码*/\nfor(var idx in list1){\n  var m = list1[idx];\n  \n}\n\nfor(var idx in list1){\n  var m = list1[idx];\n  var kl = m.keyword.split(\'#\');\n  for(var jdx in kl){\n	var k2 = kl[jdx];\n	db2.exe(`UPDATE code_ua SET platform=? WHERE ua_id>? AND platform=0 AND ua_val LIKE ?`, m.value, begin_id, k2);\n  }\n}\n\n\n\n/*生成客户端码（部份）*/\nfor(var idx in list2){\n  var m = list2[idx];\n  var kl = m.keyword.split(\'#\');\n  for(var jdx in kl){\n	var k2 = kl[jdx];\n    db2.exe(`UPDATE code_ua SET client=? WHERE ua_id>? AND client=0 AND ua_val LIKE ?`, m.value, begin_id, k2);\n  }\n}\n\n\nreturn \'OK\';\n', '生成UDP数据', 9, '2020-06-15 12:43:37', '2021-03-18 15:37:36', 16, '10m', 0, 33420, '2020-06-15 12:11:59', '2020-08-19 12:14:49');
INSERT INTO `paas_file` VALUES (178, 0, 'sdk_water', '', '/sdk_water/_test_ip.jsx', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'return ctx.ip();', '', 0, NULL, NULL, 0, '', 0, 0, '2020-06-19 15:12:06', '2020-06-19 15:12:15');
INSERT INTO `paas_file` VALUES (187, 2, 'water', '', '/water/jenkins_config', 0, 0, 1, 0, 0, NULL, 'freemarker', '', '<?xml version=\'1.0\' encoding=\'UTF-8\'?>\n<project>\n    <actions/>\n    <description></description>\n    <keepDependencies>false</keepDependencies>\n    <properties>\n        <hudson.model.ParametersDefinitionProperty>\n            <parameterDefinitions>\n                <hudson.model.StringParameterDefinition>\n                    <name>qq</name>\n                    <description>qqq</description>\n                    <defaultValue>qqq</defaultValue>\n                </hudson.model.StringParameterDefinition>\n            </parameterDefinitions>\n        </hudson.model.ParametersDefinitionProperty>\n    </properties>\n    <scm class=\"hudson.plugins.git.GitSCM\" plugin=\"git@3.3.0\">\n        <configVersion>2</configVersion>\n        <userRemoteConfigs>\n            <hudson.plugins.git.UserRemoteConfig>\n                <url>https://github.com/bingyue/easy-springmvc-maven.git</url>\n            </hudson.plugins.git.UserRemoteConfig>\n        </userRemoteConfigs>\n        <branches>\n            <hudson.plugins.git.BranchSpec>\n                <name>*/master</name>\n            </hudson.plugins.git.BranchSpec>\n        </branches>\n        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>\n        <submoduleCfg class=\"list\"/>\n        <extensions/>\n    </scm>\n    <canRoam>true</canRoam>\n    <disabled>false</disabled>\n    <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>\n    <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>\n    <triggers/>\n    <concurrentBuild>false</concurrentBuild>\n    <builders>\n        <hudson.tasks.Shell>\n            <command>\n                echo &quot;hello world!&quot;;\n                M3_HOME=/Users/admin/Documents/tool/maven\n                PATH=$PATH:$M3_HOME/bin\n                JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home\n                export M3_HOME;\n                export PATH;\n                export JAVA_HOME;\n                echo ${qq};\n                mvn clean install -U;\n            </command>\n        </hudson.tasks.Shell>\n    </builders>\n    <publishers/>\n    <buildWrappers/>\n</project>', '', 0, NULL, NULL, 0, '', 0, 0, '2020-07-03 14:21:11', '2020-07-03 14:25:46');
INSERT INTO `paas_file` VALUES (188, 2, '_code', '', '/_code/java_crud_xml_template', 0, 1, 1, 0, 0, NULL, 'freemarker', '', 'INSERT INTO `group_buying` (\n<#list fields!! as f>\n`${(f.field)!}`,\n</#list>\n) VALUES(\n<#list fields!! as f>\n@{${(f.field)!}:${(f.type)!}} ,\n</#list>\n)', '', 0, NULL, NULL, 0, '', 0, 0, '2020-07-08 10:43:15', '2020-07-08 10:53:54');
INSERT INTO `paas_file` VALUES (202, 0, '_demo', '', '/_demo/message_sub', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let act = ctx.param(\'act\');\n\nlet service = \'\';           //服务名\nlet service_secretKey=\'\';   //服务签名密钥\n\nlet receiver_url =  water.cfg(\'water/paas_uri\').value + ctx.path(); //接收地址，根据情况调整\nlet alarm_mobile=\'\';\nlet receive_way = 0;\nlet topics = [\'\'];\n\nif(act === \'sub\'){\n    //订阅消息 //String subscriber_key, String receiver_url, String access_key, String alarm_mobile, int receive_way, boolean is_unstable, String... topics\n    WaterClient.Message.subscribeTopic(service,receiver_url,service_secretKey,alarm_mobile,false,0,topics);\n    return \'OK\';\n}\n\nif(act === \'unsub\'){\n    //取消订阅 //String subscriber_key, String... topics\n    WaterClient.Message.unSubscribeTopic(service,topics);\n    return \'OK\';\n}\n\n\n//接收并处理消息 //msg:{id,times,key,topic,message,sgin}\nlet result = WaterClient.Message.receiveMessage(k => ctx.param(k), service_secretKey, msg => {\n    //msg.message;\n    return false; \n});\n\n\nreturn result;\n\n//return receiver_url;', '示例', 0, NULL, NULL, 0, '', 0, 0, '2020-08-04 14:53:38', '2020-08-12 15:28:16');
INSERT INTO `paas_file` VALUES (217, 0, 'test', '', '/test/tml', 0, 0, 1, 0, 0, NULL, 'enjoy', '', '#if(agroup_id == 0)\n    select * from appx where app_id =#(id)\n#else\n    select * from appx where agroup_id = @{agroup_id} limit 1\n#end', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-10 13:16:12', '2020-01-17 11:21:10');
INSERT INTO `paas_file` VALUES (218, 0, 'test', '', '/test/run', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'var arg = {agroup_id:0,id:2};\nvar sql = modelAndView(\"/test/tml\",arg);\n\nvar list = water.db(\"rock/rock\").call(sql, arg).getMapList();\n\nreturn list;\n\n\n// return 0;', '', 0, NULL, NULL, 0, '', 0, 0, '2020-01-17 10:53:21', '2020-07-29 11:08:36');
INSERT INTO `paas_file` VALUES (219, 0, 'test', '', '/test/xq', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'var db=water.db(\"sponge_sugar/sponge_sugar\");\n\nlet product=db.sql(\"SELECT cp.product_id,cp.logo,cp.product_name ,cp.link_url as s_url, cp1.link_url as l_url FROM co_product AS cp INNER JOIN co_position_info AS cpi ON cpi.product_id = cp.product_id  INNER JOIN co_product_check as cp1 ON cp.product_id=cp1.product_id WHERE cp.agroup_id = 6 AND cpi.channel_id = 1 AND cpi.gp_id=0 GROUP BY cpi.product_id\").getMapList();\n\nlet a=\"\";\nproduct.forEach(m=>{\n    \n    a+=\",\"+m.product_id;\n    return \"cc\";\n})\n\n\n\nreturn a;', '', 0, NULL, NULL, 0, '', 0, 0, '2020-06-19 10:42:22', '2020-09-14 10:06:53');
INSERT INTO `paas_file` VALUES (220, 0, 'test', '', '/test/yml_cfg', 0, 0, 1, 0, 0, NULL, 'javascript', '', '\n\n\n// return water.cfg(\'_demo/test_yml\').getNode().toJson();\n\n// return water.cfg(\'_demo/test_yml\').getProp();\n\n\n\n\n\n// return water.cfg(\'_demo/test_json\').getNode().toJson();\n\n// return water.cfg(\'_demo/test_json\').getProp();\n\n\n\n\n\n// return water.cfg(\'_demo/test_props\').getNode().toJson();\n\nreturn water.cfg(\'_demo/test_props\').getProp();', '', 0, NULL, NULL, 0, '', 0, 0, '2020-06-24 09:40:52', '2020-07-29 10:50:45');
INSERT INTO `paas_file` VALUES (221, 0, 'test', '', '/test/hello', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'return \'hello world!3\';', '', 0, NULL, NULL, 0, '', 0, 0, '2020-07-22 14:23:57', '2020-08-11 14:43:06');
INSERT INTO `paas_file` VALUES (222, 0, 'test', '', '/test/heihei', 0, 0, 1, 0, 0, NULL, 'javascript', '', '\nwater.heihei(\'@alarm\',\'test\');\n\nreturn \'OK\';', '', 0, NULL, NULL, 0, '', 0, 0, '2020-07-23 14:42:50', '2020-07-23 14:43:28');
INSERT INTO `paas_file` VALUES (223, 0, '_test', '', '/_test/cfg_get', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'return XUtil.cfgGet(\'log_num__pepper_log_api\');', '', 0, NULL, NULL, 0, '', 0, 0, '2020-07-23 15:16:30', '2020-07-23 15:16:48');
INSERT INTO `paas_file` VALUES (240, 0, 'test', '', '/test/zwj', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db = water.db(\"dobbin/dobbin\");\nlet start = ctx.param(\'start\');\nlet end = ctx.param(\'end\');\nlet stats_product_click_day = db.table(\"stats_product_click_day\")\n                                .where(\"log_date >= ?\", start)\n                                .and(\"log_date <= ?\", end)\n                                .select(\"*\").getMapList();\n\nlet stats_user_day = db.table(\"stats_user_day\")\n                        .where(\"log_date >= ?\", start)\n                        .and(\"log_date <= ?\", end)\n                        .select(\"*\").getMapList();\nlet arg = {\n    \"stats_product\":stats_product_click_day,\n    \"stats_user\":stats_user_day\n};\n\nreturn modelAndView(\"/test/freemarkers\",arg);\n\n// LoanMaster用户-按日统计\n\n//正式\n// let tag_id = 1019;\n//测试\nlet tag_id = 1058;\nlet agroup_id = 6;\n\n// let db = water.db(\"dobbin/dobbin\");\nlet db1 = water.db(\"sponge_sugar/sponge_sugar\");\n\n// 获取所有借贷产品\nlet products = db1.table(\"co_product\")\n                    .where(\"status = 0\")\n                    .select(\"product_id\").getMapList();\nlet plen = products.length;\n\nfor (let k = 15; k >= 1; k--) {\n    let log_date= new Datetime().addDay(-k).getDate();\n    let date_str = log_date.toString();\n    let full_start = date_str.substring(0,4) + \"-\" + date_str.substring(4,6) + \"-\" + date_str.substring(6,8) + \" 00:00:00\";\n    let full_end = date_str.substring(0,4) + \"-\" + date_str.substring(4,6) + \"-\" + date_str.substring(6,8) + \" 23:59:59\";\n\n    // 初始化各借贷产品每日点击次数为0\n    for (let j = 0; j < plen; j++) {\n        products[j].clicks = 0;\n\n        let exists = db.table(\"stats_product_click_day\")\n                        .where(\"log_date = ?\", log_date)\n                        .and(\"product_id = ?\", products[j].product_id)\n                        .exists();\n        if (!exists) {\n            db.table(\"stats_product_click_day\")\n                .set(\"log_id\", rock.client.newID(\'DOBBIN\', \'stats_product_click_day\', 60 * 60 * 24 * 365) + 10000)\n                .set(\"log_date\", log_date)\n                .set(\"clicks\", 0)\n                .set(\"product_id\", products[j].product_id)\n                .insert();\n        }\n        \n    }\n    // 判断统计表是否有数据，没有则初始化，有则update\n    let isExist = db.table(\"stats_user_day\")\n                    .where(\"log_date = ?\", log_date)\n                    .exists();\n    if (!isExist) {\n        db.table(\"stats_user_day\")\n            .set(\"log_id\", rock.client.newID(\'DOBBIN\', \'stats_user_day\', 60 * 60 * 24 * 365) + 10000)\n            .set(\"log_date\", log_date)\n            .insert();\n    }\n\n    // 设备首次激活量(当天，记录到了多少新的设备id)\n    let device_active = db.sql(\"SELECT COUNT(*) FROM device WHERE log_fulltime >= ? AND log_fulltime <= ?\",full_start,full_end).getValue();\n\n    // 设置激活量(当天记录的都算，当天去重)\n    let device_active_total = db.table(\"co_log_user_journal_daily\")\n                                .where(\"log_date = ?\", log_date)\n                                .and(\"type=1\")\n                                .select(\"COUNT(DISTINCT udid)\").getCount();\n\n    // 注册用户\n    let register = db.table(\"user_state\")\n                    .where(\"regist_date = ?\", log_date)\n                    .select(\"COUNT(*)\").getCount();\n\n    // 活跃用户\n    let daus = db.table(\"co_log_user_journal_daily\")\n                    .where(\"log_date = ?\", log_date)\n                    .and(\"type=1\")\n                    .and(\"user_id > 0\")\n                    .select(\"COUNT(*)\").getCount();\n                        \n    // 点击借贷产品数量(总点击次数)\n    let clickps = 0;\n    let page = 0;\n    let size = 1000;\n    let i = 1;\n    while(i==1) {\n\n        let resp = JSON.parse(water.paas(\'/sponge_track/log.day.no.duplicate\',\n                {tag_id: tag_id, log_date: log_date, size: size, page: page}));\n\n        if (resp.code == 1) {\n            let len = resp.list.length;\n            clickps += len;            \n\n            for (let m = 0; m < len; m++) {\n                for (let n = 0; n < products.length; n++) {\n                    if (resp.list[m].url_partner_key == products[n].product_id) {\n                        products[n].clicks += 1;\n                    }\n                }\n            }\n        }\n        page++;\n        i = resp.code;\n        XUtil.sleep(10);\n    }\n\n    // 各借贷产品每日点击次数记录\n    for (let q = 0; q < plen; q++) {\n        db.table(\"stats_product_click_day\")\n            .where(\"product_id = ?\", products[q].product_id)\n            .and(\"log_date = ?\", log_date)\n            .set(\"clicks\", products[q].clicks)\n            .update();\n    }\n\n    // 点击借贷产品用户数\n    let clickps_users = db1.table(\"co_log_user_journal_daily\")\n                            .where(\"type = 4\")\n                            .and(\"log_date = ?\", log_date)\n                            .select(\"COUNT(DISTINCT ukey)\").getCount();\n\n\n    // // 完成认证(今天有多少新的用户完成了所有认证项目)\n    // let certifications = db.sql(\"SELECT COUNT(*) FROM (SELECT DISTINCT user_id AS user_id,valid_finish_date FROM bull_order WHERE `status` >= 120 GROUP BY user_id \"+\n    // \"ORDER BY order_id desc) t WHERE t.valid_finish_date = ?\",log_date).getValue();\n\n    // // 订单量\n    // let orders = db.table(\"bull_order\")\n    //                 .where(\"status = 100\")\n    //                 .and(\"basic_date = ?\", log_date)\n    //                 .select(\"COUNT(*)\").getCount();\n\n    // // 进件量\n    // let submits = db.table(\"bull_order\")\n    //                 .where(\"submit_date = ?\", log_date)\n    //                 .select(\"COUNT(*)\").getCount();\n\n    db.table(\"stats_user_day\")\n        .where(\"log_date = ?\", log_date)\n        .set(\"device_active\", device_active)\n        .set(\"register\", register)\n        .set(\"daus\", daus)\n        .set(\"clickps\", clickps)\n        .set(\"device_active_total\", device_active_total)\n        .set(\"clickps_users\", clickps_users)\n        .set(\"certifications\", 0)\n        .set(\"orders\", 0)\n        .set(\"submits\", 0)\n        .update();\n}\n\n\n', '', 0, NULL, NULL, 0, '', 0, 0, '2020-08-17 16:59:31', '2020-10-16 11:36:26');
INSERT INTO `paas_file` VALUES (244, 0, '_test', '', '/_test/channel_stats_new', 0, 0, 1, 0, 0, NULL, 'javascript', '', '// 数据总览\nvar mydate = new Datetime();\n\nvar dateInt = mydate.getDate();\nvar fulltime = mydate.getFulltime();\n\nvar db2 = water.db(\"pepper/pepper\");\n\n// 获取渠道\nvar appList = rock.client.getAppsByGroup(31, 10047);\n\nvar originList = JSON.parse(ONode.load(appList).toJson());\nvar appIdMap = new Map();\nvar appIdTotalMap = new Map();\n// 默认已在init定时任务中把所有渠道数据插入了\n// 再次调用初始化以防新增渠道未录入\ninitStatsChannel(dateInt, appList, fulltime);\n\n/*提交手机号用户数*/\nvar submit_mobile = db2.table(\"`user_publicity_log`\")\n                    .where(\"create_date=?\", dateInt)\n                    .groupBy(\"app_id\")\n                    .select(\"app_id, COUNT(*) AS submit_mobile\").getMapList();\n\n\n//活跃用户数\nvar daus = db2.table(\"`log_user_journal_daily`\")\n            .where(\"create_date=?\", dateInt)\n            .and(\"type=1\")\n            .groupBy(\"app_id\")\n            .select(\"app_id, COUNT(user_id) AS daus\").getMapList();\n        \n            \n/*参团用户数*/\nvar join = db2.table(\"`group_buying_order`\")\n                    .where(\"create_date=?\", dateInt)\n                    .and(\"order_type = 0\")\n                    .groupBy(\"u_app_id\")\n                    .select(\"u_app_id AS app_id, COUNT(DISTINCT user_id) AS join_people\").getMapList();\n            \n/*渠道参团用户数总计去重*/ \nvar join_total = db2.table(\"`group_buying_order`\")\n                    .where(\"order_type = 0\")\n                    .groupBy(\"u_app_id\")\n                    .select(\"u_app_id AS app_id, COUNT(DISTINCT user_id) AS join_people\").getMapList();\n                    setInintVal(originList, appIdMap);\n                 \n/*销售额*/\nvar paid_amount = db2.table(\"`group_buying` AS gb\").innerJoin(\"`group_buying_order` AS gbo\")\n                    .on(\"gb.gb_id = gbo.gb_id\")\n                    .where(\"date(gb.paid_fulltime)=?\",  mydate.toString(\"yyyy-MM-dd\"))\n                    .and(\"gbo.order_type = 0\")\n                    .and(\"gbo.status IN (3, 4, 5)\")\n                    .groupBy(\"gbo.u_app_id\")\n                    .select(\"gbo.u_app_id AS app_id, SUM(gbo.paid_amount) AS paid_amount\").getMapList();\n\n                    \n/*返现金额*/\nvar return_amount =  db2.table(\"`group_buying` AS gb\").innerJoin(\"`group_buying_order` AS gbo\")\n                    .on(\"gb.gb_id = gbo.gb_id\")\n                    .where(\"date(gb.paid_fulltime)=?\",  mydate.toString(\"yyyy-MM-dd\"))\n                    .and(\"gbo.order_type = 0\")\n                   .and(\"gbo.status = 7\")\n                   .groupBy(\"gbo.u_app_id\")\n                   .select(\"gbo.u_app_id AS app_id, SUM(gbo.rebate_amount) AS return_amount\").getMapList();\n\n\n/*参团1次、参团2～5次、参团5次以上的人次*/\nvar join_gb_person = db2.table(\"`log_user_journal_daily`\")\n                        .where(\"create_date = ?\", dateInt)\n                        .and(\"type=2\")\n                        .groupBy(\"app_id\")\n                        .select(\"app_id,SUM(CASE WHEN `value` = 1 THEN 1 ELSE 0 END) AS join_gb_once, SUM(CASE WHEN `value` >= 2 AND `value` <= 5 THEN 1 ELSE 0 END) AS join_gb_tf,\"\n                        +\"SUM(CASE WHEN `value` > 5 THEN 1 ELSE 0 END) AS join_gb_moref\").getMapList();\n                        \n/*参团1次、参团2～5次、参团5次以上且是当日注册的人次*/\nvar join_gb_person_reg = db2.table(\"`log_user_journal_daily` AS a\").innerJoin(\"`user` AS b\")\n                            .on(\"a.user_id = b.user_id\")\n                            .where(\"a.create_date = ?\", dateInt)\n                            .and(\"b.reg_date = ?\", dateInt)\n                            .and(\"a.`type` = 2 and a.`value` > 0\")\n                            .groupBy(\"a.app_id\")\n                            .select(\"a.app_id,SUM(CASE WHEN a.`value` = 1 THEN 1 ELSE 0 END) AS join_gb_once_reg, SUM(CASE WHEN a.`value` >= 2 AND `value` <= 5 THEN 1 ELSE 0 END) AS join_gb_tf_reg,\"\n                        +\"SUM(CASE WHEN a.`value` > 5 THEN 1 ELSE 0 END) AS join_gb_moref_reg\").getMapList();\n\n\n/*用户统计-团长：开团人数*/\nvar create_gb_users = db2.table(\"`log_user_journal_daily`\")\n                    .where(\"create_date = ?\", dateInt)\n                    .and(\"type=3\")\n                    .groupBy(\"app_id\")\n                    .select(\"app_id, COUNT(user_id) AS create_gb_users\").getMapList();\n                    \n/*用户统计-各渠道团长：开团人数总计*/\nvar create_gb_users_total = db2.table(\"`log_user_journal_daily`\")\n                    .where(\"type=3\")\n                    .groupBy(\"app_id\")\n                    .select(\"app_id, COUNT(DISTINCT user_id) AS create_gb_users\").getMapList();                    \n                    \n/*用户统计-团长：开团且成团人数*/ \nvar create_gb_success_users = db2.table(\"`log_user_journal_daily`\")\n                    .where(\"create_date = ?\", dateInt)\n                    .and(\"type=4\")\n                    .groupBy(\"app_id\")\n                    .select(\"app_id, COUNT(user_id) AS create_gb_success_users\").getMapList();\n                    \n/*用户统计-各渠道团长：开团且成团人数总计*/ \nvar create_gb_success_users_total = db2.table(\"`log_user_journal_daily`\")\n                    .where(\"type=4\")\n                    .groupBy(\"app_id\")\n                    .select(\"app_id, COUNT(DISTINCT user_id) AS create_gb_success_users\").getMapList();\n                    \n/*用户统计-参团且支付人数*/\nvar join_gb_pay = db2.table(\"`group_buying_order`\")\n                    .where(\"create_date=?\", dateInt)\n                    .and(\"order_type = 0\")\n                    .and(\"status in (2,3,4,5,7,8,9)\")\n                    .groupBy(\"u_app_id\")\n                    .select(\"u_app_id AS app_id, COUNT( DISTINCT user_id) AS join_gb_pay\").getMapList();\n                  \n/*用户统计-各参团且支付人数总计*/                    \nvar join_gb_pay_total = db2.table(\"`group_buying_order`\")\n                    .where(\"order_type = 0\")\n                    .and(\"status in (2,3,4,5,7,8,9)\")\n                    .groupBy(\"u_app_id\")\n                    .select(\"u_app_id AS app_id, COUNT( DISTINCT user_id) AS join_gb_pay\").getMapList();                    \n                      \n/*用户统计-参团且支付未成团人数*/\nvar join_gb_pay_ungb = db2.table(\"`group_buying_order`\")\n                    .where(\"create_date=?\", dateInt)\n                    .and(\"order_type = 0\")\n                    .and(\"status in (8,9)\")\n                    .groupBy(\"u_app_id\")\n                    .select(\"u_app_id AS app_id, COUNT( DISTINCT user_id) AS join_gb_pay_ungb\").getMapList();\n\n/*用户统计-各渠道参团且支付未成团人数总计*/\nvar join_gb_pay_ungb_total = db2.table(\"`group_buying_order`\")\n                    .where(\"order_type = 0\")\n                    .and(\"status in (8,9)\")\n                    .groupBy(\"u_app_id\")\n                    .select(\"u_app_id AS app_id, COUNT( DISTINCT user_id) AS join_gb_pay_ungb\").getMapList();\n\n/*用户统计-参团且支付已成团人数*/\nvar join_gb_pay_gb = db2.table(\"`group_buying_order`\")\n                    .where(\"create_date=?\", dateInt)\n                    .and(\"order_type = 0\")\n                    .and(\"status in (3,4,5,7)\")\n                    .groupBy(\"u_app_id\")\n                    .select(\"u_app_id AS app_id, COUNT( DISTINCT user_id) AS join_gb_pay_gb\").getMapList();\n\n/*用户统计-各渠道参团且支付已成团人数总计*/\nvar join_gb_pay_gb_total = db2.table(\"`group_buying_order`\")\n                    .where(\"order_type = 0\")\n                    .and(\"status in (3,4,5,7)\")\n                    .groupBy(\"u_app_id\")\n                    .select(\"u_app_id AS app_id, COUNT( DISTINCT user_id) AS join_gb_pay_gb\").getMapList();\n\n/*用户统计-团中商品人数*/\nvar success_gb_users = db2.table(\"`group_buying_order`\")\n                    .where(\"create_date=?\", dateInt)\n                    .and(\"order_type = 0\")\n                    .and(\"status in (3,4,5)\")\n                    .groupBy(\"u_app_id\")\n                    .select(\"u_app_id AS app_id, COUNT( DISTINCT user_id) AS success_gb_users\").getMapList();\n                    \n/*用户统计-各渠道团中商品人数总计*/\nvar success_gb_users_total = db2.table(\"`group_buying_order`\")\n                    .where(\"order_type = 0\")\n                    .and(\"status in (3,4,5)\")\n                    .groupBy(\"u_app_id\")\n                    .select(\"u_app_id AS app_id, COUNT( DISTINCT user_id) AS success_gb_users\").getMapList();\n                    \n                    \n// 各渠道每日邀请好友数\nlet invite_users = db2.table(\"user_info AS ui\").innerJoin(\"`user` AS u\")\n                    .on(\"ui.recommend_user_id = u.user_id\")\n                    .where(\"ui.reg_date = ?\", dateInt)\n                    .groupBy(\"u.app_id\")\n                    .select(\"u.app_id, COUNT(*) AS invite_users\")\n                    .getMapList();\n                    \n// 各渠道历史总计邀请好友数\nlet invite_users_total = db2.table(\"user_info AS ui\").innerJoin(\"`user` AS u\")\n                            .on(\"ui.recommend_user_id = u.user_id\")\n                            .groupBy(\"u.app_id\")\n                            .select(\"u.app_id, COUNT(*) AS invite_users\")\n                            .getMapList();\n                            \n\n// 未支付取消（人）\nlet unpay_cancel_gb_users = db2.table(\"group_buying_order\")\n                    .where(\"`status` = 6\")\n                    .and(\"create_date = ?\", dateInt)\n                    .groupBy(\"u_app_id\")\n                    .select(\"u_app_id AS app_id, COUNT(DISTINCT user_id) AS unpay_cancel_gb_users\")\n                    .getMapList();\n\n// 各渠道未支付取消（人）总计\nlet unpay_cancel_gb_users_total = db2.table(\"group_buying_order\")\n                            .where(\"`status` = 6\")\n                            .groupBy(\"u_app_id\")\n                            .select(\"u_app_id AS app_id, COUNT(DISTINCT user_id) AS unpay_cancel_gb_users\")\n                            .getMapList();\n\n// 各渠道每日未支付取消（次数）\nlet unpay_cancel_gb_nums = db2.table(\"group_buying_order\")\n                    .where(\"`status` = 6\")\n                    .and(\"create_date = ?\", dateInt)\n                    .groupBy(\"u_app_id\")\n                    .select(\"u_app_id AS app_id, COUNT(*) AS unpay_cancel_gb_nums\")\n                    .getMapList();\n                    \n// 各渠道未支付取消（次数）总计\nlet unpay_cancel_gb_nums_total = db2.table(\"group_buying_order\")\n                            .where(\"`status` = 6\")\n                            .groupBy(\"u_app_id\")\n                            .select(\"u_app_id AS app_id, COUNT(*) AS unpay_cancel_gb_nums\")\n                            .getMapList();\n// 未成团取消（人）\nlet fail_gb_cancel_users = db2.table(\"group_buying_order\")\n                    .where(\"`status` = 8\")\n                    .and(\"create_date = ?\", dateInt)\n                    .groupBy(\"u_app_id\")\n                    .select(\"u_app_id AS app_id, COUNT(DISTINCT user_id) AS fail_gb_cancel_users\")\n                    .getMapList();\n                    \n// 未成团取消（人）总计                   \nlet fail_gb_cancel_users_total = db2.table(\"group_buying_order\")\n                            .where(\"`status` = 8\")\n                            .groupBy(\"u_app_id\")\n                            .select(\"u_app_id AS app_id, COUNT(DISTINCT user_id) AS fail_gb_cancel_users\")\n                            .getMapList();\n                    \n// 未成团取消（次数）                   \nlet fail_gb_cancel_nums = db2.table(\"group_buying_order\")\n                    .where(\"`status` = 8\")\n                    .and(\"create_date = ?\", dateInt)\n                    .groupBy(\"u_app_id\")\n                    .select(\"u_app_id AS app_id, COUNT(*) AS fail_gb_cancel_nums\")\n                    .getMapList();\n                    \n// 未成团取消（次数）总计                    \nlet fail_gb_cancel_nums_total = db2.table(\"group_buying_order\")\n                            .where(\"`status` = 8\")\n                            .groupBy(\"u_app_id\")\n                            .select(\"u_app_id AS app_id, COUNT(*) AS fail_gb_cancel_nums\")\n                            .getMapList();\n\n// 商城购物人数每日\nlet store_trade_users = db2.table(\"`stats_trade`\")\n                        .where(\"type = 0\")\n                        .and(\"create_date = ?\", dateInt)\n                        .groupBy(\"app_id\")\n                        .select(\"trade_store_users AS store_trade_users, app_id\")\n                        .getMapList();\n\n// 商城购物人数总计(TODO:需重新差去重)??????????????????????\n\n// 商城购物次数每日\nlet store_trade_nums = db2.table(\"`stats_trade`\")\n                        .where(\"type = 0\")\n                        .and(\"create_date = ?\", dateInt)\n                        .groupBy(\"app_id\")\n                        .select(\"trade_store_count AS store_trade_nums, app_id\")\n                        .getMapList();\n// 商城购物次数总计\nlet store_trade_nums_total = db2.table(\"`stats_trade`\")\n                        .where(\"type = 0\")\n                        .groupBy(\"app_id\")\n                        .select(\"trade_store_count AS store_trade_nums, app_id\")\n                        .getMapList();\n \n//拼团成功人数每日\nlet join_gb_success = db2.table(\"`group_buying_order`\")\n                        .where(\"create_date = ?\", dateInt)\n                        .and(\"`status` IN (2,3,4,5)\")\n                        .and(\"order_type = 0\")\n                        .groupBy(\"u_app_id\")\n                        .select(\"COUNT(DISTINCT gbo.user_id) AS join_gb_success, u_app_id AS app_id\")\n                        .getMapList();\n//拼团成功人数总计\nlet join_gb_success_total = db2.table(\"`group_buying_order`\")\n                        .where(\"`status` IN (2,3,4,5)\")\n                        .and(\"order_type = 0\")\n                        .groupBy(\"u_app_id\")\n                        .select(\"COUNT(DISTINCT gbo.user_id) AS join_gb_success, u_app_id AS app_id\")\n                        .getMapList();\n// 拼团成功次数每日\nlet join_gb_success_nums = db2.table(\"`group_buying_order`\")\n                        .where(\"create_date = ?\", dateInt)\n                        .and(\"`status` IN (2,3,4,5)\")\n                        .and(\"order_type = 0\")\n                        .groupBy(\"u_app_id\")\n                        .select(\"COUNT(gbo.user_id) AS join_gb_success_nums, u_app_id AS app_id\")\n                        .getMapList();\n// 拼团成功次数总计\nlet join_gb_success_nums_total = db2.table(\"`group_buying_order`\")\n                        .where(\"`status` IN (2,3,4,5)\")\n                        .and(\"order_type = 0\")\n                        .groupBy(\"u_app_id\")\n                        .select(\"COUNT(gbo.user_id) AS join_gb_success_nums, u_app_id AS app_id\")\n                        .getMapList();\n                    \nsetInintVal(originList, appIdMap);\n\nexBuildData(submit_mobile, [\"submit_mobile\"]);\n// exBuildData(register_count, [\"register\"]);\nexBuildData(daus, [\"daus\"]);\nexBuildData(join, [\"join_people\"]);\nexBuildData(paid_amount, [\"paid_amount\"]);\nexBuildData(return_amount, [\"return_amount\"]);\nexBuildData(join_gb_person, [\"join_gb_once\",\"join_gb_tf\",\"join_gb_moref\"]);\nexBuildData(join_gb_person_reg, [\"join_gb_once_reg\",\"join_gb_tf_reg\",\"join_gb_moref_reg\"]);\nexBuildData(create_gb_users, [\"create_gb_users\"]);\nexBuildData(create_gb_success_users, [\"create_gb_success_users\"]);\nexBuildData(join_gb_pay, [\"join_gb_pay\"]);\nexBuildData(join_gb_pay_ungb, [\"join_gb_pay_ungb\"]);\nexBuildData(join_gb_pay_gb, [\"join_gb_pay_gb\"]);\nexBuildData(success_gb_users, [\"success_gb_users\"]);\n\nexBuildData(invite_users, [\"invite_users\"]);\nexBuildData(unpay_cancel_gb_users, [\"unpay_cancel_gb_users\"]);\nexBuildData(unpay_cancel_gb_nums, [\"unpay_cancel_gb_nums\"]);\nexBuildData(fail_gb_cancel_users, [\"fail_gb_cancel_users\"]);\nexBuildData(fail_gb_cancel_nums, [\"fail_gb_cancel_nums\"]);\nexBuildData(store_trade_users, [\"store_trade_users\"]);\nexBuildData(store_trade_nums, [\"store_trade_nums\"]);\nexBuildData(join_gb_success, [\"join_gb_success\"]);\nexBuildData(join_gb_success_nums, [\"join_gb_success_nums\"]);\n\n\nsetInintVal(originList, appIdTotalMap);\n\nexBuildTotalData(join_total, [\"join_people\"]);\nexBuildTotalData(create_gb_users_total, [\"create_gb_users\"]);\nexBuildTotalData(create_gb_success_users_total, [\"create_gb_success_users\"]);\nexBuildTotalData(join_gb_pay_total, [\"join_gb_pay\"]);\nexBuildTotalData(join_gb_pay_ungb_total, [\"join_gb_pay_ungb\"]);\nexBuildTotalData(join_gb_pay_gb_total, [\"join_gb_pay_gb\"]);\nexBuildTotalData(success_gb_users_total, [\"success_gb_users\"]);\n\nexBuildTotalData(invite_users_total, [\"invite_users\"]);\nexBuildTotalData(unpay_cancel_gb_users_total, [\"unpay_cancel_gb_users\"]);\nexBuildTotalData(unpay_cancel_gb_nums_total, [\"unpay_cancel_gb_nums\"]);\nexBuildTotalData(fail_gb_cancel_users_total, [\"fail_gb_cancel_users\"]);\nexBuildTotalData(fail_gb_cancel_nums_total, [\"fail_gb_cancel_nums\"]);\n// exBuildTotalData(store_trade_users_total, [\"store_trade_users\"]);需补充\nexBuildTotalData(store_trade_nums_total, [\"store_trade_nums\"]);\nexBuildTotalData(join_gb_success_total, [\"join_gb_success\"]);\nexBuildTotalData(join_gb_success_nums_total, [\"join_gb_success_nums\"]);\n\nvar tc = new Timecount().start();\n\nfor(var i=0; i < originList.length; i++){\n    var tmp = originList[i]; \n    var m = appIdMap.get(tmp.app_id +\"\");\n    \n    db2.table(\"`stats_channel`\")\n        .where(\"log_date=?\", dateInt)\n        .and(\"app_id = ?\", tmp.app_id)\n        .and(\"type = 0\")\n        .set(\"submit_mobile\", m.get(\"submit_mobile\"))\n        .set(\"daus\", m.get(\"daus\"))\n        .set(\"join_people\", m.get(\"join_people\"))\n        .set(\"paid_amount\",m.get(\"paid_amount\"))     \n        .set(\"return_amount\", m.get(\"return_amount\"))\n        .set(\"join_gb_once\", m.get(\"join_gb_once\"))\n        .set(\"join_gb_tf\", m.get(\"join_gb_tf\"))\n        .set(\"join_gb_moref\", m.get(\"join_gb_moref\"))\n        .set(\"join_gb_once_reg\", m.get(\"join_gb_once_reg\"))\n        .set(\"join_gb_tf_reg\", m.get(\"join_gb_tf_reg\"))\n        .set(\"join_gb_moref_reg\", m.get(\"join_gb_moref_reg\"))\n        .set(\"create_gb_users\", m.get(\"create_gb_users\"))\n        .set(\"create_gb_success_users\", m.get(\"create_gb_success_users\"))\n        .set(\"join_gb_pay\", m.get(\"join_gb_pay\"))\n        .set(\"join_gb_pay_ungb\", m.get(\"join_gb_pay_ungb\"))\n        .set(\"join_gb_pay_gb\", m.get(\"join_gb_pay_gb\"))\n        .set(\"success_gb_users\", m.get(\"success_gb_users\"))\n        .update();\n        \n    var n = appIdTotalMap.get(tmp.app_id +\"\");\n    db2.table(\"`stats_channel`\")\n        .where(\"app_id = ?\", tmp.app_id)\n        .and(\"type = 1\")\n        .set(\"submit_mobile\", n.get(\"submit_mobile\"))\n        .set(\"daus\", n.get(\"daus\"))\n        .set(\"join_people\", n.get(\"join_people\"))\n        .set(\"paid_amount\",n.get(\"paid_amount\"))     \n        .set(\"return_amount\", n.get(\"return_amount\"))\n        .set(\"join_gb_once\", n.get(\"join_gb_once\"))\n        .set(\"join_gb_tf\", n.get(\"join_gb_tf\"))\n        .set(\"join_gb_moref\", n.get(\"join_gb_moref\"))\n        .set(\"join_gb_once_reg\", n.get(\"join_gb_once_reg\"))\n        .set(\"join_gb_tf_reg\", n.get(\"join_gb_tf_reg\"))\n        .set(\"join_gb_moref_reg\", n.get(\"join_gb_moref_reg\"))\n        .set(\"create_gb_users\", n.get(\"create_gb_users\"))\n        .set(\"create_gb_success_users\", n.get(\"create_gb_success_users\"))\n        .set(\"join_gb_pay\", n.get(\"join_gb_pay\"))\n        .set(\"join_gb_pay_ungb\", n.get(\"join_gb_pay_ungb\"))\n        .set(\"join_gb_pay_gb\", n.get(\"join_gb_pay_gb\"))\n        .set(\"success_gb_users\", n.get(\"success_gb_users\"))\n        .update();\n            \n}\n\nXUtil.log(\"update====== \" + tc.stop().milliseconds());\n\n// 构建各渠道每日统计值\nfunction exBuildData(data, keyArr) {\n    \n    for (var i = 0; i < data.length; i++) {\n        \n        var d = data[i];\n        var a = d.get(\"app_id\");\n        var m = appIdMap.get(a + \"\");\n        \n        if (m) {\n            var len = keyArr.length;\n            if (len > 1) {\n                for (var j = 0; j < len; j++) {\n                    var tmp = keyArr[j];\n                    m.set(tmp, d.get(tmp));\n                    appIdMap.set(a + \"\", m);\n                }\n            } else {\n                m.set(keyArr[0], d.get(keyArr[0]));\n                appIdMap.set(a + \"\", m);\n            }\n        }\n    }\n}\n// 构建各渠道历史总计值\nfunction exBuildTotalData(data, keyArr) {\n    \n    for (var i = 0; i < data.length; i++) {\n        \n        var d = data[i];\n        var a = d.get(\"app_id\");\n        var ms = appIdTotalMap.get(a + \"\");\n        \n        if (ms) {\n            var len = keyArr.length;\n            if (len > 1) {\n                for (var j = 0; j < len; j++) {\n                    var tmp = keyArr[j];\n                    ms.set(tmp, d.get(tmp));\n                    appIdTotalMap.set(a + \"\", ms);\n                }\n            } else {\n                ms.set(keyArr[0], d.get(keyArr[0]));\n                appIdTotalMap.set(a + \"\", ms);\n            }\n        }\n    }\n}\nfunction initStatsChannel(dateInt, appList, log_fulltime) {\n    // 获取今日已经统计的\n    var todayData = db2.table(\"`stats_channel`\")\n                    .where(\"log_date=?\", dateInt)\n                    .and(\"`type` = 0\")\n                    .select(\"app_id, log_date\").getMapList();\n\n    // 获取各渠道总计\n    var totalData = db2.table(\"`stats_channel`\")\n                    .where(\"type=1\")\n                    .select(\"app_id, log_date\").getMapList();\n                    \n    var appIdMap = new Map(); \n    let list = JSON.parse(ONode.load(appList).toJson());\n    let total_list = JSON.parse(ONode.load(appList).toJson());\n    \n    // 剔除已经存在渠道不做插入操作\n    for(var i=0; i < todayData.length; i++){\n        \n        var t = todayData[i];\n    \n        for(var j = 0; j < list.length; j++){\n            var m = list[j]; \n            if(m.app_id == t.app_id) {\n                list.splice(j,1);\n            }\n        }\n    }\n    \n    // 剔除已经存在渠道不做插入操作\n    for(var i=0; i < totalData.length; i++){\n        \n        var t = totalData[i];\n    \n        for(var j = 0; j < total_list.length; j++){\n            var m = total_list[j]; \n            if(m.app_id == t.app_id) {\n                total_list.splice(j,1);\n            }\n        }\n    }\n    \n    // 对不存在的渠道号做插入操作\n    for(var i=0; i < list.length; i++){\n        var tmp = list[i]; \n        // 不存在\n        db2.table(\"`stats_channel`\")\n            .set(\"log_id\", rock.client.newID(\'LOG_ID\', \'stats_channel_id\', 60 * 60 * 24 * 365))\n            .set(\"ugroup_id\", tmp.ugroup_id)\n            .set(\"agroup_id\", tmp.agroup_id)\n            .set(\"app_id\", tmp.app_id)\n            .set(\"log_date\", dateInt)\n            .set(\"log_fulltime\", log_fulltime)\n            .set(\"type\", 0)\n            .insert();\n    }\n    // 对不存在的渠道号做插入操作\n    for(var i=0; i < total_list.length; i++){\n        var tmp = total_list[i]; \n        db2.table(\"`stats_channel`\")\n            .set(\"log_id\", rock.client.newID(\'LOG_ID\', \'stats_channel_id\', 60 * 60 * 24 * 365))\n            .set(\"ugroup_id\", tmp.ugroup_id)\n            .set(\"agroup_id\", tmp.agroup_id)\n            .set(\"app_id\", tmp.app_id)\n            .set(\"log_date\", dateInt)\n            .set(\"log_fulltime\", log_fulltime)\n            .set(\"type\", 1)\n            .insert();\n    }\n}\n// 初始化各个渠道的统计值\nfunction setInintVal(originLists, maps) {\n    for(var i=0; i < originLists.length; i++){\n        var tmp = originLists[i]; \n        var am = new Map(); \n        am.set(\"submit_mobile\", 0);\n        am.set(\"daus\", 0);\n        am.set(\"join_people\", 0);\n        am.set(\"paid_amount\", 0);\n        am.set(\"return_amount\", 0);\n        am.set(\"join_gb_once\", 0);\n        am.set(\"join_gb_tf\", 0);\n        am.set(\"join_gb_moref\", 0);\n        am.set(\"join_gb_once_reg\", 0);\n        am.set(\"join_gb_tf_reg\", 0);\n        am.set(\"join_gb_moref_reg\", 0);\n        am.set(\"create_gb_users\", 0);\n        am.set(\"create_gb_success_users\", 0);\n        am.set(\"join_gb_pay\", 0);\n        am.set(\"join_gb_pay_ungb\", 0);\n        am.set(\"join_gb_pay_gb\", 0);\n        am.set(\"success_gb_users\", 0);\n        \n        maps.set(tmp.app_id + \"\", am);\n    }\n}\nreturn \"OK\";\n', '', 0, NULL, NULL, 0, '', 0, 0, '2020-08-21 16:46:50', '2020-08-24 17:27:23');
INSERT INTO `paas_file` VALUES (245, 0, '_test', '', '/_test/err', 0, 0, 1, 0, 0, NULL, 'javascript', '', '// var a=null;\n\n// return a(12);\n\n\n\n// var a=null;\n\n// return a.b(12);\n\nreturn water2.db(\"test/test\").table(\"a\").select(\"*\");', '', 0, NULL, NULL, 0, '', 0, 0, '2020-08-22 07:37:44', '2020-08-22 07:55:46');
INSERT INTO `paas_file` VALUES (267, 2, '_ops', '', '/_ops/peapi.sh', 0, 1, 1, 0, 0, NULL, 'sh', 'text/plain', '#!/usr/bin/bash\n\nname=\"pepperapi\"\ndpdir=/data/sss/pepper.zmapi.cn\n\nbackup(){\nbackuptime=$(date \'+%Y%m%d_%H:%M:%S\')\nbackupdir=\"/data/backup/$name/$backuptime\"\nmkdir -p \"${backupdir}\"\nscp $host:${dpdir}/pepperapi.jar ${backupdir}\n}\n\ndeploy(){\nrsync -avz --delete pepperapi.jar ${host}:${dpdir}\nssh -t root@${host} <<EOF\nsed -i \'/127.0.0.1:8081/s/^.*$/    server 127.0.0.1:8081 down;/g\'  /data/_nginx.conf/pepper.zmapi.cn \nnginx -s reload\nsleep 7\nsystemctl restart pepperapi1\nwhile :\n    do\n        curl -m 3 -sI  \"http://127.0.0.1:8081/run/check/\" | grep 200\n        if [[ $? -eq 0 ]]\n            then\n            echo \"service1 is ok\"\n            break\n        fi\n        sleep 3\n    done\nsleep 3\nsed -i \'/127.0.0.1:8081/s/^.*$/    server 127.0.0.1:8081 weight=10;/g\'  /data/_nginx.conf/pepper.zmapi.cn\nsed -i \'/127.0.0.1:8082/s/^.*$/    server 127.0.0.1:8082 down;/g\'  /data/_nginx.conf/pepper.zmapi.cn\nnginx -s reload\nsleep 7\nsystemctl restart pepperapi2\nwhile :\n    do\n        curl -m 3 -sI  \"http://127.0.0.1:8082/run/check/\" | grep 200\n        if [[ $? -eq 0 ]]\n            then\n            echo \"service2 is ok\"\n            break\n        fi\n        sleep 3\n    done\nsleep 3\nsed -i \'/127.0.0.1:8082/s/^.*$/    server 127.0.0.1:8082 weight=10;/g\'  /data/_nginx.conf/pepper.zmapi.cn\nnginx -s reload\nEOF\n}\n\nhost=api\nbackup\n\nfor host in  {api,api2}\ndo\ndeploy\ndone\nif [[ $? -eq 0 ]]\n    then\n    curl \"http://water2/run/push/?target=@alarm&msg=pepperapi发布成功\"\n    else\n    curl \"http://water2/run/push/?target=@alarm&msg=pepperapi发布失败\"\n    break\nfi\n\nrm -rf ${name}.jar\n', '', 0, NULL, NULL, 0, '', 0, 0, '2020-09-01 15:27:15', '2020-09-01 15:29:56');
INSERT INTO `paas_file` VALUES (268, 2, '_ops', '', '/_ops/rockrpc.sh', 0, 1, 1, 0, 0, NULL, 'sh', 'text/plain', '#!/usr/bin/bash\n\nname=\"rockrpc\"\ndpdir=/data/sss/water.zmapi.cn\n\nbackup(){\nbackuptime=$(date \'+%Y%m%d_%H:%M:%S\')\nbackupdir=\"/data/backup/$name/$backuptime\"\nmkdir -p \"${backupdir}\"\nscp $host1:${dpdir}/rockrpc.jar ${backupdir}\n}\n\ndeploy(){\nrsync -avz --delete rockrpc.jar ${host}:${dpdir}\nssh -t root@${host} <<EOF\nip=$(ip addr |grep inet |grep -v inet6 |grep eth0 | awk \'{print $2}\' | awk -F \"/\" \'{print $1}\')\ncurl http://water2/sev/set/?s=rockrpc@${ip}:8085,0\nsleep 2\nsystemctl restart rockrpc1\nsleep 2\ncurl http://water2/sev/set/?s=rockrpc@${ip}:8085,1\ncurl http://water2/sev/set/?s=rockrpc@${ip}:8086,0\nsleep 2\nsystemctl restart rockrpc2\nsleep 2\ncurl http://water2/sev/set/?s=rockrpc@${ip}:8086,1\nEOF\n}\n\nhost=water\nbackup\n\nfor host in  {waterapi,waterapi2}\ndo\ndeploy\ndone\nif [[ $? -eq 0 ]]\n    then\n    curl \"http://water2/run/push/?target=@alarm&msg=rockrpc发布成功\"\n    else\n    curl \"http://water2/run/push/?target=@alarm&msg=rockrpc发布失败\"\n    break\nfi\n\nrm -rf ${name}.jar\n', '', 0, NULL, NULL, 0, '', 0, 0, '2020-09-01 15:28:15', '2020-09-01 15:28:27');
INSERT INTO `paas_file` VALUES (270, 0, '_ops', 'filter.path', '/_ops/filter.js', 0, 0, 1, 0, 0, NULL, 'javascript', '', '//所有路径拦截器，都要这句开头\nif(ctx.getHandled()){\n    return;\n} \n\n\nlet ip = XUtil.ip();\n\nif(WaterClient.Whitelist.existsOfClientAndServerIp(ip) === false){\n    ctx.output(`${ip}, not is whitelist!`);\n    ctx.setHandled(true);   \n}\n\n\n', '/_ops/#拦截器', 0, NULL, NULL, 0, '', 0, 0, '2020-09-01 15:55:23', '2020-09-01 16:03:13');
INSERT INTO `paas_file` VALUES (281, 0, 'sponge_track', '', '/sponge_track/get.original.url', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let tag_id= ctx.paramAsInt(\"tag_id\",0);\nlet url_partner_key=ctx.param(\"url_partner_key\");\n\n\nvar value =water.db(\"sponge/sponge_track\")\n                .table(\"short_url\")\n			    .where(\" tag_id= ?\",tag_id)\n                .and(\"url_partner_key = ?\", url_partner_key)\n                .limit(1)\n                .select(\"url_val\")\n                .getValue();\nreturn {code:1,msg:\"success\",url:value};', '获取短地址的原始连接', 0, NULL, NULL, 0, '', 0, 0, '2020-10-10 10:58:41', '2020-10-10 11:28:52');
INSERT INTO `paas_file` VALUES (283, 0, 'test', '', '/test/freemarkers', 0, 0, 1, 0, 0, NULL, 'freemarker', '', '<!doctype html>\n<html lang=\"zh_CN\" class=\" \">\n  <head>\n	<title>数据统计展示</title>\n  <meta charset=\"UTF-8\">\n  <style>\n  \n  </style>\n  </head>\n  <body>\n    <table border=\"1\" cellspacing=\"0\">\n      <tr>\n        <th>日期</th>\n        <th>设备激活量</th>\n        <th>设备首次激活量</th>\n        <th>注册</th>\n        <th>活跃(登陆用户数)</th>\n        <th>点击借贷产品用户数</th>\n        <th>点击借贷产品总点击次数</th>\n      </tr>\n      <#list stats_user as m>\n      <tr>\n        <td>${m.log_date}</td>\n        <td>${m.device_active_total}</td>\n        <td>${m.device_active}</td>\n        <td>${m.register}</td>\n        <td>${m.daus}</td>\n        <td>${m.clickps_users}</td>\n        <td>${m.clickps}</td>\n      </tr>\n      </#list>\n    </table>\n    <table border=\"1\" cellspacing=\"0\">\n      <caption><h3>各产品点击次数详情</h3></caption>\n      <tr>\n        <th>日期</th>\n        <th>借贷产品ID</th>\n        <th>点击次数</th>\n      </tr>\n      <#list stats_product as m>\n      <tr>\n          <td>${m.log_date}</td>\n          <td>${m.product_id}</td>\n          <td>${m.clicks}</td>\n        </tr>\n      </#list>\n    <table>\n  </body>\n</html>', '', 0, NULL, NULL, 0, '', 0, 0, '2020-10-14 16:52:38', '2020-10-16 11:35:00');
INSERT INTO `paas_file` VALUES (287, 1, '_test', '', '/_test/task_run', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'var arg = {agroup_id:0,id:2};\nvar sql = modelAndView(\"/test/tml\",arg);\n\nvar list = water.db(\"rock/rock\").call(sql, arg).getMapList();\n\nreturn list;', '', 8, '2020-03-10 16:11:31', '2021-03-18 15:11:32', 0, '1h', 0, 0, '2020-01-17 11:28:13', '2020-04-23 10:43:30');
INSERT INTO `paas_file` VALUES (288, 1, '_test', '', '/_test/log', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'XUtil.log(\'test4\');', '', 9, '2020-06-17 00:00:00', '2021-03-18 15:43:03', 2979, '1m', 0, 90584, '2020-06-17 22:09:43', '2020-06-17 22:35:21');
INSERT INTO `paas_file` VALUES (289, 0, '_test', '', '/_test/mongodb', 0, 0, 1, 0, 0, NULL, 'javascript', '', '\nvar db2 = water.mg(\"water/water_mongo\", \"demo\");\n\ndb2.createIndex(\"user2\", {createdAt:1}, {expireAfterSeconds:2});\n\ndb2.insertOne(\"user2\", {createdAt:new Date().getTime(), name:\"noear\", lavel: 12, sex:111});\n\nreturn \'OK\';\n', '', 0, NULL, NULL, 0, '', 0, 0, '2021-02-02 17:35:25', '2021-02-02 18:25:20');
INSERT INTO `paas_file` VALUES (290, 1, 'water', '', '/water/log_del_15d_bef', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let list = water.db(\"water/water\")\n                .sql(\"SELECT logger_id,tag,logger,keep_days,DATE_FORMAT(DATE_ADD(NOW(),INTERVAL -keep_days DAY),\'%Y%m%d\') date FROM water_cfg_logger WHERE source=\'\'\")\n                .getMapList();\n\nlet hub = Java.type(\'org.noear.water.protocol.ProtocolHub\');\n\nfor(let i in list){\n    let m = list[i];\n    \n    try{\n        hub.logQuerier.clear(m.logger);\n        //water.db(\"water/water_log\").exe(\"DELETE FROM \"+m.logger+\" WHERE log_date <= \"+m.date);\n    }catch(err){\n	    XUtil.log({\"content\":err});\n    }\n}\n\nreturn \"ok\";', '日志-删除过期的数据', 9, '2020-01-17 12:54:28', '2021-03-18 14:54:27', 49, '1h', 0, 1043, '2020-01-17 12:54:41', '2021-02-03 14:57:41');
INSERT INTO `paas_file` VALUES (291, 1, 'water', '', '/water/msg_del_and_stat', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'var db = water.db(\"water/water_msg\");\n\nvar date3 = Datetime.Now().addDay(-3).getDate();\nvar date1 = Datetime.Now().addDay(-1).getDate();\n\nvar hub = Java.type(\'org.noear.water.protocol.ProtocolHub\');\n\nvar topicList = db.exe(\"list::SELECT topic_id,topic_name FROM water_msg_topic\");\n\nvar num = hub.messageSource().stat(date1,0);  //db.exe(\"val::SELECT COUNT(*) num FROM water_msg_message WHERE log_date=?\", date1);\n\n\n//统计\n//\ndb.exe(\"DELETE FROM water_msg_message_ex_stat WHERE log_date=?\", date1);\ndb.exe(\"INSERT INTO water_msg_message_ex_stat (log_date,total) VALUES (?,?)\", date1, num);\n\n\nfor(var tp of topicList){\n    var num1 = hub.messageSource().stat(date1, tp.topic_id);\n\n    db.exe(\"INSERT INTO water_msg_message_ex_stat (topic_id,log_date,total) VALUES (?,?,?)\", tp.topic_id, date1, num);\n    //db.exe(`INSERT INTO water_msg_message_ex_stat(topic_id,total,log_date) \n    //            SELECT topic_id,COUNT(*) num,log_date \n    //            FROM water_msg_message WHERE log_date=? GROUP BY topic_id`, date1);	\n} \n\n//更新主题数量\ndb.exe(`UPDATE water_msg_topic t,water_msg_message_ex_stat s\n        SET t.stat_msg_day_num = s.total \n        WHERE t.topic_id = s.topic_id AND s.log_date = ?`,date1);\n\n\n//删除\n//\n\nhub.messageSource().clear(date3);\n// db.exe(\"DELETE d FROM water_msg_distribution d,water_msg_message m  WHERE d.msg_id = m.msg_id AND m.log_date<=? and m.state=2\", date3);			\n// db.exe(\"DELETE FROM water_msg_message WHERE log_date<=? AND state=2\", date3);						\n\n// db.exe(\"DELETE d FROM water_msg_distribution d,water_msg_message m  WHERE d.msg_id = m.msg_id AND m.log_date<=? and m.state=3\", date3);	\n// db.exe(\"DELETE FROM water_msg_message WHERE log_date<=? AND state=3\", date3);\n\n// db.exe(\"DELETE d FROM water_msg_distribution d,water_msg_message m WHERE d.msg_id = m.msg_id AND m.log_date<=? and m.state<0\", date3);\n// db.exe(\"DELETE FROM water_msg_message WHERE log_date<=? AND state<0\", date3);\n\nreturn \"ok\";', '消息清理和统计', 9, '2020-01-17 13:12:59', '2021-03-18 15:13:00', 713, '1h', 0, 1046, '2020-01-17 13:13:00', '2021-03-11 18:31:18');
INSERT INTO `paas_file` VALUES (292, 1, 'water', '', '/water/log_stat_row_num', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let statApi = requireX(\"/water/log_stat.clz\");\n\nlet db     = water.db(\"water/water\");\n\nlet list = db.exe(\"list::SELECT logger_id,tag,logger FROM water_cfg_logger WHERE source=\'\'\");\nlet hub = Java.type(\'org.noear.water.protocol.ProtocolHub\');\n\n\nlet now  = new Datetime();\n\nstatApi.logger_stat_date(list,now.getDate(),\'row_num_today\');\nstatApi.logger_stat_date(list,now.addDay(-1).getDate(),\'row_num_yesterday\');\nstatApi.logger_stat_date(list,now.addDay(-1).getDate(),\'row_num_beforeday\');\n\nfor(let lm of list){\n    \n    try{\n        let num = hub.logQuerier.stat(lm.logger, null, null); \n        db.exe(\"UPDATE water_cfg_logger SET row_num=? WHERE logger_id=?\", num, lm.logger_id);\n    }\n    catch(err){}\n}\n\nreturn \"ok\";', '日志-统计行数', 9, '2020-01-17 13:22:31', '2021-03-18 15:30:31', 34088, '30m', 0, 2064, '2020-01-17 13:22:33', '2021-02-02 22:07:43');
INSERT INTO `paas_file` VALUES (293, 1, 'water', '', '/water/msg_reset', 0, 0, 1, 0, 0, NULL, 'javascript', '', '// var currTime = new Datetime().getTicks();\n// var timeOuts = 1000 * 30; //30s\n// var refTime  = currTime - timeOuts;\n\n// var db2 = water.db(\"water/water_msg\");\n// var rst = 0;\n\n// if(db2.table(\'water_msg_message\').whereEq(\"state\",1).andLt(\"dist_nexttime\",refTime).exists()){\n//     rst = db2.table(\'water_msg_message\')\n//        .set(\'state\',0)\n//        .whereEq(\"state\",1).andLt(\"dist_nexttime\",refTime)\n//        .update();\n       \n//     XUtil.log(\"reset-\"+rst);\n// }\n\nlet hub = Java.type(\'org.noear.water.protocol.ProtocolHub\');\n\nlet rst = hub.messageSource().reset(30);\n\nXUtil.log(\"reset-\"+rst);\n\n//db2.exe(`UPDATE water_msg_message SET state=0  WHERE state=1 AND (dist_nexttime -${currTime})<-${timeOuts}`);\n\nreturn \"ok\" + rst;', '消息异常重置', 9, '2020-01-17 13:39:05', '2021-03-18 15:43:06', 14, '1m', 0, 62009, '2020-01-17 13:23:52', '2021-02-06 13:32:59');
INSERT INTO `paas_file` VALUES (294, 1, 'water', '', '/water/speed_del_30', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let date1 = new Datetime().addDay(-7).getDate();\nlet date2 = new Datetime().addDay(-45).getDate();\nlet d3 = new Datetime().addDay(-7).getDate();\n\nlet db1= water.db(\'water/water\');\n\ndb1.exe(`DELETE FROM water_reg_service_speed WHERE DATE(last_updatetime)<?`, d3);\ndb1.exe(`DELETE FROM water_reg_service_speed_hour WHERE log_date <?`, date1);\ndb1.exe(`DELETE FROM water_reg_service_speed_date WHERE log_date <?`, date2);\n\nreturn \'OK\';\n', '接口性能-删除超时的记录', 9, '2020-05-06 00:00:00', '2021-03-18 15:00:00', 38, '1h', 0, 1159, '2020-05-06 09:35:44', '2020-08-19 11:45:49');
INSERT INTO `paas_file` VALUES (295, 1, 'water', '', '/water/speed_sync', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let util = requireX(\'/water/speed_sync.fun\');\n\nlet rd = water.rd(\'water/water_redis\',5);\n\nlet rlist = rd.open1(function(ru){\n  return ru.key(\'monitor_keys\').hashGetAll();\n});\n\nvar jlist = [];\nrlist.forEach(function(k,v){\n  jlist.push(k);\n});\n\nlet now = new Datetime();\n\nlet log_date = now.toString(\'yyyyMMdd\');\nlet log_hour = now.toString(\'HH\');\n\nfor(let i in jlist){\n  let ikey = jlist[i];\n  let dkey = ikey +\'$\'+ log_date;\n  \n  let dd = rd.open1((ru)=>{\n	return ru.key(dkey).hashGetAll();\n  });\n  \n  if(dd && dd.size()>0){\n    let ss = ikey.split(\'$\');\n	let mm = util.map2json(dd);\n	\n	mm.service = ss[0];\n	mm.tag = ss[1];\n	mm.name = ss[2];\n	mm.log_fulltime = rlist.get(ikey);\n  \n    if(mm.service && mm.service != \'null\'){\n        util.speed_log(mm);\n    }\n  }\n}\n\nreturn \'OK\';\n\n', '接口性能-从Reids同步概况数据', 9, '2020-05-06 00:00:00', '2021-03-18 15:39:02', 5014, '5m', 0, 12680, '2020-05-06 09:38:45', '2021-01-14 12:37:06');
INSERT INTO `paas_file` VALUES (296, 1, 'water', '', '/water/speed_sync_date', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let util = requireX(\'/water/speed_sync.fun\');\n\nlet rd = water.rd(\'water/water_redis\',5);\n\nlet rlist = rd.open1(function(ru){\n  return ru.key(\'monitor_keys\').hashGetAll();\n});\n\nvar jlist = [];\nrlist.forEach(function(k,v){\n  jlist.push(k);\n});\n\nlet now = new Datetime();\n\nlet log_date = now.toString(\'yyyyMMdd\');\nlet log_hour = now.toString(\'HH\');\n\n\nfor(var i in jlist){\n  let ikey = jlist[i];\n  let dkey = ikey +\'$\'+ log_date;\n  \n  let dd = rd.open1((ru)=>{\n	return ru.key(dkey).hashGetAll();\n  });\n  \n  if(dd && dd.size()>0){\n    let ss = ikey.split(\'$\');\n	let mm = util.map2json(dd);\n	\n	mm.service = ss[0];\n	mm.tag = ss[1];\n	mm.name = ss[2];\n	mm.log_date = log_date;\n  \n    if(mm.service && mm.service != \'null\'){\n        util.speed_log_date(mm);\n    }\n  }\n}\n\n\nreturn \'OK\';\n\n', '接口性能-从Reids同步日纬度数据', 9, '2020-05-06 00:00:00', '2021-03-18 15:39:02', 5018, '5m', 0, 12682, '2020-05-06 09:38:56', '2021-01-14 12:37:15');
INSERT INTO `paas_file` VALUES (297, 1, 'water', '', '/water/speed_sync_hour', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let util = requireX(\'/water/speed_sync.fun\');\n\nlet rd = water.rd(\'water/water_redis\',5);\n\nlet rlist = rd.open1(function(ru){\n  return ru.key(\'monitor_keys\').hashGetAll();\n});\n\nvar jlist = [];\nrlist.forEach(function(k,v){\n  jlist.push(k);\n});\n\nlet now = new Datetime();\n\nlet log_date = now.toString(\'yyyyMMdd\');\nlet log_hour = now.toString(\'HH\');\n\n\nfor(let i in jlist){\n  let ikey = jlist[i];\n  let dkey = ikey +\'$\'+ log_date + log_hour;\n  \n  let dd = rd.open1((ru)=>{\n	return ru.key(dkey).hashGetAll();\n  });\n  \n  if(dd && dd.size()>0){\n    let ss = ikey.split(\'$\');\n	let mm = util.map2json(dd);\n	\n	mm.service = ss[0];\n	mm.tag = ss[1];\n	mm.name = ss[2];\n	mm.log_date = log_date;\n	mm.log_hour = log_hour;\n  \n    if(mm.service && mm.service != \'null\'){\n        util.speed_log_hour(mm);\n    }\n  }\n}\n\nreturn \'OK\';', '接口性能-从Reids同步时纬度数据', 9, '2020-05-06 00:00:00', '2021-03-18 15:39:02', 4035, '5m', 0, 12677, '2020-05-06 09:39:05', '2021-01-14 12:37:21');
INSERT INTO `paas_file` VALUES (298, 1, 'water', '', '/water/speed_sync_ref', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'var date = new Datetime().getDate();\n\nvar db2 = water.db(`water/water`);\n\ndb2.exe(`UPDATE water_reg_service_speed s,water_reg_service_speed_date d\n            SET s.average_ref = d.average\n            WHERE d.log_date=? AND s.service = d.service AND s.tag = d.tag AND s.name = d.name`, date);\n\n\nreturn \'OK\';', '接口性能-数据引用同步', 9, '2020-05-06 00:00:00', '2021-03-18 15:39:02', 2882, '5m', 0, 12679, '2020-05-06 09:39:17', '2020-08-19 11:47:22');
INSERT INTO `paas_file` VALUES (299, 1, 'water', '', '/water/speed_sync.fun', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'this.map2json = function (map){\n  var obj = {};\n  map.forEach(function(k,v){\n    obj[k] = v;\n  });\n  \n  return obj;\n}\n\n\nthis.speed_log = function(m){\n    if(!m.tag || !m.name || !m.average){\n       return \'ERROR\';\n    }\n    \n    if(!m.total_num_slow1){\n      m.total_num_slow1=0;\n    }\n    \n    if(!m.total_num_slow2){\n      m.total_num_slow2=0;\n    }\n    \n    if(!m.total_num_slow5){\n      m.total_num_slow5=0;\n    }\n    \n    if(!m.slowest){\n      m.slowest=0;\n    }\n    \n    if(!m.fastest){\n      m.fastest=0;\n    }\n    \n    water.db(\'water/water\')\n      .table(\'water_reg_service_speed\')\n      .set(\'average\',m.average).set(\'fastest\',m.fastest)\n      .set(\'slowest\',m.slowest).set(\'total_num\',m.total_num)\n      .set(\'service\',m.service)\n      .set(\'tag\',m.tag)\n      .set(\'name\',m.name)\n      .set(\'total_num_slow1\',m.total_num_slow1)\n      .set(\'total_num_slow2\',m.total_num_slow2)\n      .set(\'total_num_slow5\',m.total_num_slow5)\n      .build(function(tb){\n        if(m.log_fulltime && m.log_fulltime.indexOf(\'-\')>0){\n    	   tb.set(\'last_updatetime\',m.log_fulltime);\n    	}\n      })\n      .upsert(\'service,tag,name\');\n    \n    return \'OK\';\n}\n\nthis.speed_log_date = function(m){\n    if(!m.tag || !m.name || !m.average || !m.log_date){\n       return \'ERROR\';\n    }\n    \n    if(!m.slowest){\n      m.slowest=0;\n    }\n    \n    if(!m.fastest){\n      m.fastest=0;\n    }\n    \n    if(m.total_time){\n       m.average = parseInt(m.total_time/m.total_num);\n    }\n    \n    water.db(\'water/water\')\n      .table(\'water_reg_service_speed_date\')\n      .set(\'average\',m.average).set(\'fastest\',m.fastest)\n      .set(\'slowest\',m.slowest).set(\'total_num\',m.total_num)\n      .set(\'service\',m.service)\n      .set(\'tag\',m.tag)\n      .set(\'name\',m.name)\n      .set(\'log_date\',m.log_date)\n      .build(function(tb){\n        if(m.total_num_slow1){\n    	  tb.set(\'total_num_slow1\',m.total_num_slow1);\n    	}\n      \n        if(m.total_num_slow2){\n    	  tb.set(\'total_num_slow2\',m.total_num_slow2);\n    	}\n      \n        if(m.total_num_slow5){\n    	  tb.set(\'total_num_slow5\',m.total_num_slow5);\n    	}\n      })\n      .upsert(\'service,tag,name,log_date\');\n    \n    return \'OK\';    \n}\n\n\nthis.speed_log_hour = function(m){\n    if(!m.tag || !m.name || !m.average || !m.log_date || !m.log_hour){\n       return \'ERROR\';\n    }\n    \n    if(!m.slowest){\n      m.slowest=0;\n    }\n    \n    if(!m.fastest){\n      m.fastest=0;\n    }\n    \n    water.db(\'water/water\')\n      .table(\'water_reg_service_speed_hour\')\n      .set(\'average\',m.average).set(\'fastest\',m.fastest)\n      .set(\'slowest\',m.slowest).set(\'total_num\',m.total_num)\n      .set(\'service\',m.service)\n      .set(\'tag\',m.tag)\n      .set(\'name\',m.name)\n      .set(\'log_date\',m.log_date)\n      .set(\'log_hour\',m.log_hour)\n      .build(function(tb){\n        if(m.total_num_slow1){\n    	  tb.set(\'total_num_slow1\',m.total_num_slow1);\n    	}\n      \n        if(m.total_num_slow2){\n    	  tb.set(\'total_num_slow2\',m.total_num_slow2);\n    	}\n      \n        if(m.total_num_slow5){\n    	  tb.set(\'total_num_slow5\',m.total_num_slow5);\n    	}\n      })\n      .upsert(\'service,tag,name,log_date,log_hour\');\n    \n    \n    return \'OK\';    \n}\n\n\n', '接口性能-公共函数', 0, NULL, NULL, 0, '1h', 0, 0, '2020-05-06 09:40:48', '2021-01-14 12:28:59');
INSERT INTO `paas_file` VALUES (300, 1, 'water', '', '/water/server_bls_track_pull', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'water.call(\"wateradmin\",\"mot/bls/track/ajax/pull\");\n\nreturn \'OK\';', '拉取bls的指标数据', 8, '2020-05-06 00:00:00', '2021-03-18 15:40:03', 21, '10m', 0, 5403, '2020-05-06 10:19:27', '2020-05-06 10:33:53');
INSERT INTO `paas_file` VALUES (301, 1, 'water', '', '/water/server_dbs_track_pull', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'water.call(\"wateradmin\",\"mot/dbs/track/ajax/pull\");\nwater.call(\"wateradmin\",\"mot/dbs/mencache/track/ajax/pull\");\nwater.call(\"wateradmin\",\"mot/dbs/redis/track/ajax/pull\");\n\nreturn \'OK\';', '拉取dbs的指标数据', 8, '2020-05-06 00:00:00', '2021-03-18 15:40:00', 48, '10m', 0, 5396, '2020-05-06 10:20:18', '2020-05-06 10:34:44');
INSERT INTO `paas_file` VALUES (302, 1, 'water', '', '/water/server_ecs_sev_num_stat', 0, 0, 1, 0, 0, NULL, 'javascript', '', ' let db1 = water.db(\'water/water\');\n \n var list = db1.sql(\"list::SELECT server_id,address_local ip FROM water_ops_server WHERE iaas_type=0 AND address_local!=\'\'\");\n \n for(let i in list){\n   let m = list[i];\n   let num = db1.exe(`val::SELECT COUNT(*) num FROM water_reg_service WHERE address LIKE ?`, `${m.ip}%`); \n   db1.exe(`UPDATE water_ops_server SET sev_num =? WHERE server_id=?`, num, m.server_id);				\n }\n \n \n return \'OK\';', '统计服务器的服务数量', 9, '2020-05-06 00:00:00', '2021-03-18 15:00:00', 6, '1h', 0, 1158, '2020-05-06 10:21:19', '2020-08-19 11:44:12');
INSERT INTO `paas_file` VALUES (303, 1, 'water', '', '/water/server_ecs_track_pull', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'water.call(\'wateradmin\',\'mot/ecs/track/ajax/pull\');\n\nreturn \'OK\';', '拉取ecs的指标数据', 8, '2020-05-06 00:00:00', '2021-03-18 15:00:00', 39, '1h', 0, 986, '2020-05-06 10:21:28', '2020-05-06 10:35:23');
INSERT INTO `paas_file` VALUES (304, 1, 'water', '', '/water/_service_disable_auto', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'water/water\');\n\n//\n//分开执行，可以用到索引，进而不用锁全表\n//\ndb2.exe(`\nUPDATE water_reg_service SET is_enabled=0 \nWHERE (address LIKE ?) AND check_last_state=1`, \'192.%\');\n\n\ndb2.exe(`\nUPDATE water_reg_service SET is_enabled=0 \nWHERE (address LIKE ?) AND check_last_state=1`, \'169.%\');\n\n\ndb2.exe(`\nUPDATE water_reg_service SET is_enabled=0 \nWHERE (address LIKE ?) AND check_last_state=1`, \'10.37.%\');\n\n\nreturn \'OK\';', '', 9, '2020-05-17 00:00:00', '2021-03-18 15:42:01', 22, '2m', 0, 33780, '2020-05-17 07:35:34', '2020-08-19 11:49:27');
INSERT INTO `paas_file` VALUES (305, 1, 'water', '', '/water/msg_subscriber_disable_auto__', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'water/water_msg\');\n\n//禁用操作\n\n//内网IP\n//\ndb2.exe(`UPDATE water_msg_subscriber SET is_enabled=0 \nWHERE is_enabled=1 AND check_last_state=1 AND receive_url LIKE ?`,\'%//192.%\');\n\ndb2.exe(`UPDATE water_msg_subscriber SET is_enabled=0 \nWHERE is_enabled=1 AND check_last_state=1 AND receive_url LIKE ?`,\'%//169.%\');\n\ndb2.exe(`UPDATE water_msg_subscriber SET is_enabled=0 \nWHERE is_enabled=1 AND check_last_state=1 AND receive_url LIKE ?`,\'%//10.37.%\');\n\n//本机IP\n//\ndb2.exe(`UPDATE water_msg_subscriber SET is_enabled=0 \nWHERE is_enabled=1 AND check_last_state=1 AND receive_url LIKE ?`,\'%//0:0:%\');\n\ndb2.exe(`UPDATE water_msg_subscriber SET is_enabled=0 \nWHERE is_enabled=1 AND check_last_state=1 AND receive_url LIKE ?`,\'%//127.0%\');\n\n\n//删除操作（放在禁用之后）\n\n//IP注册的，坏了的（一般是water内部消息）\n//\ndb2.exe(`DELETE FROM water_msg_subscriber \nWHERE is_enabled=1 AND check_last_state=1 AND check_error_num > 4 AND LENGTH(subscriber_note) > 0`);\n\nreturn \"OK\";', '消息-删除无意义的内网订阅者', 9, '2020-05-17 00:00:00', '2021-03-18 15:43:03', 3037, '2m', 0, 33791, '2020-05-17 07:38:35', '2020-08-19 11:48:31');
INSERT INTO `paas_file` VALUES (306, 1, 'water', '', '/water/raas_sync_log2all', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'water/water_log\');\n\nvar date = Datetime.Now().addDay(-2).getDate(); // SELECT DATE_FORMAT(DATE_ADD(NOW(),INTERVAL -2 DAY),\'%Y%m%d\')\n\ndb2.exe(`INSERT INTO rubber_log_request_all\nSELECT * FROM rubber_log_request WHERE log_date=?`, date);\n\n\nreturn \'OK\';', '将处理日志同步到总表（处理表只保持30天）', 9, '2020-06-15 00:00:00', '2021-03-18 00:00:00', 50, '1d', 0, 67, '2020-06-15 12:54:13', '2020-08-19 12:15:35');
INSERT INTO `paas_file` VALUES (307, 1, 'water', '', '/water/_service_consumer_del_7d', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let date = Datetime.Now().addDay(-7).getFulltime();\n\nlet db2 = water.db(\'water/water\');\n\ndb2.table(\'water_reg_consumer\')\n   .where(\'chk_fulltime < ?\',date)\n   .delete();\n     \n     \nreturn \'OK\';', '网关-删除7天没活跃的消息者记录', 9, '2020-06-15 00:00:00', '2021-03-18 15:00:00', 11, '1h', 0, 1158, '2020-06-15 16:10:06', '2020-07-03 11:23:41');
INSERT INTO `paas_file` VALUES (308, 1, 'water', '', '/water/msg_persistence', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'var db = water.db(\"water/water_msg\");\n\nvar date90 = Datetime.Now().addDay(-90).getDate();\nvar date2 = Datetime.Now().addDay(-2).getDate();\n\nvar hub = Java.type(\'org.noear.water.protocol.ProtocolHub\');\n\nhub.messageSource().persistence(date2,date90);\n\n// //转移数据（长久保存）\n// //\n// if(db.table(\'water_msg_message_all\').whereEq(\'log_date\',date2).exists() === false){\n//     db.exe(`INSERT INTO water_msg_message_all\n//             SELECT * FROM water_msg_message WHERE log_date = ?`, date2);\n// }\n\n// //清理统计\n// db.exe(\"DELETE FROM water_msg_message_ex_stat WHERE log_date<=?\", date90);\n\n// //清理持久化\n// db.exe(\"DELETE FROM water_msg_message_all WHERE log_date<=?\", date90);\n\nreturn \"ok\";', '消息持久化处理', 9, '2020-06-29 03:00:00', '2021-03-18 03:00:00', 15551, '1d', 0, 64, '2020-06-30 11:12:48', '2021-03-11 18:26:17');
INSERT INTO `paas_file` VALUES (309, 1, 'water', '', '/water/_service_consumer_sync', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\'water/water\');\n\ndb2.exe(`UPDATE water_reg_consumer c, water_reg_service s \n            SET c.chk_fulltime = s.check_last_time,\n                c.chk_last_state = s.check_last_state,\n                c.is_enabled = s.is_enabled\n          WHERE c.consumer_address = s.address`);\n          \n          \nreturn \'OK\';', '网关-同步消费者记录', 9, '2020-07-03 00:00:00', '2021-03-18 15:43:00', 6024, '1m', 0, 68878, '2020-07-03 10:16:56', '2020-07-06 10:09:40');
INSERT INTO `paas_file` VALUES (310, 1, 'water', '', '/water/log_alarm', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let list = water.db(\"water/water\")\n                .sql(\"SELECT logger_id,tag,logger,source FROM water_cfg_logger WHERE is_alarm=1\")\n                .getMapList();\n                \n\nlet alarm_sign = XUtil.cfgGet(\'water/alarm_sign\');\n\nlet date1 = Datetime.Now().getDate();\nlet hub = Java.type(\'org.noear.water.protocol.ProtocolHub\');\n                \nfor(let m of list){\n    \n    try{\n        let key2 = \"log_num__\" + m.logger;\n        let num2_old = XUtil.cfgGet(key2);\n        \n        let num2 = hub.logQuerier.stat(5,date1);\n        \n        if(num2){\n            if(!num2_old || (parseInt(num2_old) != num2)){\n                let msg = `预警：错误日志数量::${num2}\\\\n\\\\n[${m.logger}][${alarm_sign}]`;\n                \n                water.heihei(\'@alarm\',msg);\n                \n                XUtil.cfgSet(key2, num2+\'\');\n            }\n        }\n        \n    }catch(err){\n	    XUtil.log({\"content\":err});\n    }\n}\n\nreturn \'OK\';', '日志-检查错误数量并告警', 9, '2020-07-22 00:00:00', '2021-03-18 15:43:03', 2959, '1m', 0, 68871, '2020-07-23 14:12:33', '2021-02-02 22:03:54');
INSERT INTO `paas_file` VALUES (311, 1, 'water', '', '/water/_service_runtime_pull', 0, 0, 1, 0, 0, NULL, 'javascript', '', 'let db2 = water.db(\"water/water\");\n\nlet serivers = db2.table(\"water_reg_service\").whereEq(\"check_type\",0).andEq(\'is_enabled\',1).select(\"key,name,address\").getMapList();\nlet datetime = Datetime.Now();\n\nfor(let s1 of serivers){\n   let rst_str = water.call(\"wateradmin\",\"mot/service/check\",{\"s\":`${s1.name}@${s1.address}`});\n\n   if(rst_str && rst_str.startsWith(\"{\")){\n       let rst = JSON.parse(rst_str);\n\n       if(rst.data){\n          rst = rst.data;\n       }\n       \n       db2.table(\"water_reg_service_runtime\")\n          .set(\"key\",s1.key)\n          .set(\"name\",s1.name)\n          .set(\"address\",s1.address)\n          .set(\"log_date\",datetime.getDate())\n          .set(\"log_hour\",datetime.getHours())\n          .set(\"log_minute\",datetime.getMinutes())\n          .set(\"log_fulltime\",\"$NOW()\")\n          .set(\"memory_max\", rst.memoryMax)\n          .set(\"memory_total\", rst.memoryTotal)\n          .set(\"memory_used\", rst.memoryUsed)\n          .set(\"thread_peak_count\", rst.threadPeakCount)\n          .set(\"thread_count\", rst.threadCount)\n          .set(\"thread_daemon_count\", rst.threadDaemonCount)\n          .insertBy(\"key,log_date,log_hour,log_minute\");\n   }\n}\n\nreturn \"OK\";', '服务-运行时信息拉取', 8, '2020-09-14 09:56:59', '2021-03-18 15:41:00', 300, '5m', 0, 9409, '2020-09-14 09:29:30', '2020-09-26 12:10:17');
INSERT INTO `paas_file` VALUES (312, 1, 'water', '', '/water/_service_runtime_15d_del', 0, 0, 1, 0, 0, NULL, 'javascript', '', ' var db2 = water.db(\"water/water\");\n var date = Datetime.Now().addDay(-15).getDate();\n \n db2.table(\"water_reg_service_runtime\").where(\'log_date<?\',date).delete();\n\n\n return \'OK\';', '服务-运行时信息超时删除', 9, '2021-01-20 00:00:00', '2021-03-18 15:00:00', 8, '1h', 0, 1158, '2021-01-20 14:41:39', '2021-01-20 14:43:40');
INSERT INTO `paas_file` VALUES (313, 1, 'water', '', '/water/log_stat.clz', 0, 0, 1, 0, 0, NULL, 'javascript', '', '\nthis.logger_stat_date = function(list,date,field){\n    let db     = water.db(\"water/water\");\n    let hub = Java.type(\'org.noear.water.protocol.ProtocolHub\');\n    \n    for(let i in list){\n        let lm = list[i];\n        \n        try{\n            var num = hub.logQuerier.stat(lm.logger, null, date);  //db_log.exe(\"SELECT COUNT(*) FROM \"+lm.logger+\" WHERE log_date=?\",date);\n            db.exe(\"UPDATE water_cfg_logger SET \"+field+\"=? WHERE logger_id=?\", num, lm.logger_id);\n        }\n        catch(err){}\n    }\n}\n\n', '日志-统计类', 0, NULL, NULL, 0, '1h', 0, 0, '2021-02-03 12:57:26', '2021-02-03 12:57:42');

SET FOREIGN_KEY_CHECKS = 1;
