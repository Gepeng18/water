[{"file_id":12,"file_type":2,"tag":"_code","label":"tml","path":"/_code/java_model","rank":-1,"is_staticize":true,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"freemarker","content_type":"","content":"import lombok.Data;\nimport java.util.*;\n\n@Data\npublic class ${table_camel!}Do {\n    \n    <#list fields!! as f>\n    /** ${(f.comment)!} */\n    public ${(f.type)!} ${(f.field)!};\n    </#list>\n\n}","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20200115182722,"update_fulltime":1647704190020,"use_whitelist":""},{"file_id":24,"file_type":2,"tag":"_code","label":"","path":"/_code/java_model_ibinder","rank":-1,"is_staticize":true,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"freemarker","content_type":"","content":"import lombok.Getter;\nimport lombok.Setter;\nimport org.noear.wood.GetHandlerEx;\nimport org.noear.wood.IBinder;\nimport java.math.BigDecimal;\nimport java.util.*;\n\n@Getter\n@Setter\npublic class ${table_camel!}Model implements IBinder {\n    \n    <#list fields!! as f>\n /** ${(f.comment)!} */\n    public ${(f.type)!} ${(f.field)!};\n    </#list>\n\n    @Override\n public void bind(GetHandlerEx s) {\n        <#list fields as f>\n        ${(f.field)!} = s.get(\"${(f.field)!}\").value(${(f.def)!});\n        </#list>\n }\n \n  @Override\n public IBinder clone() {\n    return new ${table_camel!}Model();\n  }\n\n}","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20200117144558,"update_fulltime":20200819161506,"use_whitelist":""},{"file_id":25,"file_type":2,"tag":"_code","label":"","path":"/_code/java_edit","rank":0,"is_staticize":true,"is_editable":true,"is_disabled":true,"is_exclude":false,"link_to":"","edit_mode":"freemarker","content_type":"","content":"public static void edit${table_camel!} (<#list fields!! as f>${(f.type)!} ${(f.field)!}<#sep>,\n                             </#sep></#list>) throws SQLException {\n                                 \n    DbTableQuery query = db().table(\"${tb!}\")<#list fields!! as f><#if (f.field)! != pri_key!>.set(\"${(f.field)!}\", ${(f.field)!})</#if><#sep>\n                             </#sep></#list>;\n\n    if (${pri_key!} > 0) {\n        query.where(\"${pri_key!} = ?\", ${pri_key!})\n             .update();\n    } else {\n        query.insert();\n    }\n\n}\n","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20200117144629,"update_fulltime":20200117144637,"use_whitelist":""},{"file_id":26,"file_type":2,"tag":"_code","label":"","path":"/_code/java_edit2","rank":0,"is_staticize":true,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"freemarker","content_type":"","content":"public static void edit${table_camel!} (${table_camel!}Model m) throws SQLException {\n                                 \n    DbTableQuery qr = db().table(\"${tb!}\")\n                          .setEntity(m);\n\n    if (${pri_key!} > 0) {\n        qr.where(\"${pri_key!} = ?\", ${pri_key!})\n          .update();\n    } else {\n        qr.insert();\n    }\n\n}\n","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20200117144651,"update_fulltime":20200117144702,"use_whitelist":""},{"file_id":27,"file_type":2,"tag":"_code","label":"","path":"/_code/java_crud","rank":0,"is_staticize":true,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"freemarker","content_type":"","content":"public static void save${table_camel!} (${table_camel!}Model m) throws Exception {\n                                 \n    DbTableQuery qr = db().table(\"${tb!}\")\n                          .setEntity(m);\n\n    if (m.${pri_key!} > 0) {\n        qr.where(\"${pri_key!} = ?\", m.${pri_key!})\n          .update();\n    } else {\n        qr.set(\"operator\",Session.current().getUserName())\n          .set(\"log_date\",Datetime.Now().getDate())\n          .set(\"log_fulltime\",Datetime.Now().getFullTime())\n          .insert();\n    }\n}\n\npublic static void del${table_camel!} (int ${pri_key!}) throws SQLException {\n                                 \n    db().table(\"${tb!}\")\n        .where(\"${pri_key!} = ?\", ${pri_key!})\n        .delete();\n}\n\npublic static ${table_camel!}Model get${table_camel!} (int ${pri_key!}) throws SQLException {\n                                 \n    return db().table(\"${tb!}\")\n              .where(\"${pri_key!} = ?\", ${pri_key!})\n              .orderBy(\"log_fulltime desc\")\n              .limit(1)\n              .select(\"*\")\n              .getItem(new ${table_camel!}Model());\n}\n\n\npublic static List<${table_camel!}Model> get${table_camel!}List (${table_camel!}Model m) throws SQLException {\n                                 \n    return db().table(\"${tb!}\")\n              .where(\"1=1\")\n              .orderBy(\"log_fulltime desc\")\n              .select(\"*\")\n              .getList(new ${table_camel!}Model());\n}\n\n\npublic static List<${table_camel!}Model> get${table_camel!}ListByPage (${table_camel!}Model m, PageModel pageModel) throws SQLException {\n                                 \n    DbTableQuery query = db().table(\"${tb!}\")\n                        .where(\"1=1\");\n    if (pageModel != null) {\n      int start = (pageModel.page - 1) * pageModel.pageSize;\n      DbTableQuery queryCount = query;\n      pageModel.setRowCount(queryCount.select(\"count(*)\").getCount());\n      return query\n          .orderBy(\"log_fulltime desc\")\n          .limit(start, pageModel.pageSize)\n          .select(\"*\")\n          .getList(new ${table_camel!}Model());\n    } else {\n      return query.orderBy(\"log_fulltime desc\").select(\"*\").getList(new ${table_camel!}Model());\n    }          \n}\n\n\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class PageModel {\n\n    public Integer page;\n    public Integer pageSize;\n    public long    rowCount;\n\n  public PageModel() { }\n\n  public PageModel(Integer page, Integer pageSize) {\n    this.page = (page == null || page == 0)?1:page;\n    this.pageSize = (pageSize == null || pageSize == 0)?10:pageSize;\n  }\n}\n\n\n","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20200117144715,"update_fulltime":20200117144727,"use_whitelist":""},{"file_id":28,"file_type":2,"tag":"_code","label":"","path":"/_code/java_insert","rank":0,"is_staticize":true,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"freemarker","content_type":"","content":"import noear.wood.DbQueryProcedure;\nimport webapp.Config;\n\npublic class ${tb!}_add extends DbQueryProcedure {\n\n    <#list fields!! as f>\n    public ${(f.type)!} ${(f.field)!};\n    </#list>\n\n    public ${tb!}_add() {\n\n        super(Config.${key!});\n\n        sql(\"INSERT INTO `${tb!}` (<#list fields!! as f>`${(f.field)!}`<#sep>, </#sep></#list>)\" +\n            \" VALUES (<#list fields!! as f>@${(f.field)!}<#sep>,  </#sep></#list>);\");\n\n        <#list fields!! as f>\n        set(\"@${(f.field)!}\", () -> ${(f.field)!});\n        </#list>\n\n    }\n\n}\n","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20200117144748,"update_fulltime":20200117144754,"use_whitelist":""},{"file_id":29,"file_type":2,"tag":"_code","label":"","path":"/_code/paas_stats_save","rank":0,"is_staticize":true,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"freemarker","content_type":"","content":"function insertOrUpdateResult(target_date, <#list fields!! as f><#if f.field != pri_key>${(f.field)!}<#sep>, </#sep></#if></#list>) {\n    <#list fields!! as f>\n    <#if f.field != pri_key>\n    if (!${f.field}) {\n    ${f.field} = 0;\n    }\n    </#if>\n    </#list>\n\n  var is_exist = water\n    .db(\"${tag}.${key}\")\n    .table(\"${tb}\")\n   .where(\"target_date = ?\", target_date)\n    .selectCount();\n \n  if (is_exist && 0 < is_exist) {\n   water\n            .db(\"${tag}.${key}\")\n            .table(\"${tb}\")\n            <#list fields!! as f>\n            <#if f.field != pri_key>\n            .set(\"${f.field}\", ${f.field})\n            </#if>\n            </#list>\n     .set(\"update_date\", now.getDate())\n      .set(\"update_fulltime\", now.getFulltime())\n      .where(\"target_date = ?\", target_date)\n      .update();\n  } else {\n    water\n            .db(\"${tag}.${key}\")\n            .table(\"${tb}\")\n            .set(\"${pri_key}\", rock.client.newID(\"${tag?upper_case}\", \"${tb}_id\", 315360000))\n            <#list fields!! as f>\n            <#if f.field != pri_key>\n            .set(\"${f.field}\", ${f.field})\n            </#if>\n            </#list>\n      .set(\"target_date\", target_date)\n            .set(\"create_date\", now.getDate())\n            .set(\"create_fulltime\", now.getFulltime())\n      .set(\"update_date\", now.getDate())\n      .set(\"update_fulltime\", now.getFulltime())\n      .insert();\n  }\n}","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20200117144807,"update_fulltime":20210405161428,"use_whitelist":""},{"file_id":30,"file_type":2,"tag":"_code","label":"","path":"/_code/wood_xml_insert","rank":0,"is_staticize":true,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"freemarker","content_type":"","content":"<sql id=\"add_${tb!}\"\n     :return=\"long\"\n     :caching=\"cache_${key!}\"\n     :cacheClear=\"${tb!}_<#noparse>${</#noparse>${pri_key!}<#noparse>}</#noparse>\"\n     :remarks=\"新增${tb!}\">\n    INSERT INTO `${tb!}` (<#list fields!! as f>`${(f.field)!}`<#sep>, </#sep></#list>)\n                  VALUES (<#list fields!! as f>@{${(f.field)!}:${(f.type)!}}<#sep>, </#sep></#list>)\n</sql>","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20200117144834,"update_fulltime":20200807141835,"use_whitelist":""},{"file_id":31,"file_type":2,"tag":"_code","label":"","path":"/_code/java_model_ibinder_2","rank":0,"is_staticize":true,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"freemarker","content_type":"","content":"import org.noear.wood.*;\n\nimport java.util.*;\n\npublic class ${table_camel!}Model implements IBinder {\n    \n    <#list fields!! as f>\n // ${(f.comment)!}\n    public ${(f.type)!} ${(f.field)!};\n    </#list>\n\n  public void bind(GetHandlerEx s) {\n        <#list fields as f>\n        ${(f.field)!} = s.get(\"${(f.field)!}\").value(${(f.def)!});\n        </#list>\n }\n \n  public IBinder clone() {\n    return new ${table_camel!}Model();\n  }\n\n}\n","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20200117144857,"update_fulltime":20200117144907,"use_whitelist":""},{"file_id":35,"file_type":0,"tag":"water","label":"","path":"/water/paas/help/api/","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"var System = Java.type('java.lang.System');\n\n\nvar sysinfo = ('Running on Java version: ' + System.getProperty('java.version')) + '；' + ('Unix time from Java: ' + System.currentTimeMillis());\n\n\nreturn modelAndView(\"/water/paas/help/api/view\",{sysinfo:sysinfo,\"hahah\":\"hahahah\"});","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20200205112559,"update_fulltime":1643339797685,"use_whitelist":""},{"file_id":36,"file_type":0,"tag":"water","label":"","path":"/water/paas/help/api/view","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"freemarker","content_type":"code/internal","content":"<!doctype html>\n<html class=\"frm10\">\n<head>\n    <title>接口手册111111111111111111111111111111111111111111</title>\n    <link rel=\"stylesheet\" href=\"//jtx.noear.org/img/_core/durian/main.css?v=14\" />\n    <script src=\"//cdn.bootcss.com/jquery/3.4.1/jquery.min.js\"></script>\n    <style>\n    block{margin:0 10px;}\n    </style>\n</head>\n<body>\n<main>\n\n<div class=\"mar10-t mar10-b\"><h2>概要：</h2></div>\n<br/>\n\n<block>\n${sysinfo!}\n</block>\n<br/>\n<block>\n    <h2>已安装的 脚本或模板执行器</h2>\n    <hr/>\n    <ul>\n        <#list XUtil.executorList() as m1>\n        <li>\n            <div>${m1}</div>\n        </li>\n        </#list>\n    </ul>\n</block>\n<br/>\n\n<block>\n    <h2>脚本和模板执行器 共享嵌入接口或对象</h2>\n    <hr/>\n    <ul>\n        <li>\n            <div class=\"t3\">/** 默认数据访问对象（:org.noear.wood.DbContext） */</div>\n            <div>db</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 默认缓存服务对象（:org.noear.wood.cache.ICacheServiceEx），可被替换 */</div>\n            <div>cache</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 当前上下文对象（:org.noear.solon.core.handle.Context） */</div>\n            <div>ctx</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 本地缓存服务对象（:org.noear.wood.cache.ICacheServiceEx） */</div>\n            <div>localCache</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 引擎嵌入基础工具 */</div>\n            <div>XUtil</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 引擎嵌入锁工具 */</div>\n            <div>XLock</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 引擎嵌入函数总线（用于跨语法共享函数） */</div>\n            <div>XFun</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 引擎嵌入消息总线（用于水平拆分或扩展业务处理） */</div>\n            <div>XMsg</div>\n        </li>\n    </ul>\n</block>\n<br/>\n\n<block>\n    <h2>脚本执行器 专属嵌入接口或对象11</h2>\n    <hr/>\n    <ul>\n        <li>\n            <div class=\"t3\">/** 加载模块或类 */</div>\n            <div>var obj = <b>requireX</b>(path);</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 返回模块和视图 */</div>\n            <div>return <b>modelAndView</b>(path, model);</div>\n        </li>\n        <li>\n            <div class=\"t3\">/** 其它嵌入类 */</div>\n            <div>Context、ONode、Datetime、Timecount、Timespan</div>\n        </li>\n    </ul>\n</block>\n\n<br/>\n<div class=\"mar10-t mar10-b\"><h2>具体：<n style='font-size:1rem;font-weight:normal; '>（可借用浏览器查找功能快速定位）</n></h2></div>\n<br/>\n\n<#list XUtil.interfaceList() as l1>\n<block>\n    <div><h2>${l1.name}::${l1.type}</h2></div>\n    <hr/>\n    <ul>\n        <#list l1.methods as s1>\n        <li>\n            <div class=\"t3\">${XUtil.htmlEncode(s1.note)!}</div>\n            <div>${s1.code}</div>\n        </li>\n        </#list>\n    </ul>\n</block>\n</#list>\n\n\n</main>\n</body>\n</html>","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20200205113727,"update_fulltime":1643339768553,"use_whitelist":""},{"file_id":188,"file_type":2,"tag":"_code","label":"","path":"/_code/java_crud_xml_template","rank":0,"is_staticize":true,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"freemarker","content_type":"","content":"INSERT INTO `group_buying` (\n<#list fields!! as f>\n`${(f.field)!}`,\n</#list>\n) VALUES(\n<#list fields!! as f>\n@{${(f.field)!}:${(f.type)!}} ,\n</#list>\n)","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20200708104315,"update_fulltime":20200708105354,"use_whitelist":""},{"file_id":267,"file_type":2,"tag":"_ops","label":"","path":"/_ops/peapi.sh","rank":0,"is_staticize":true,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"sh","content_type":"text/plain","content":"#!/usr/bin/bash\n\nname=\"pepperapi\"\ndpdir=/data/sss/pepper.zmapi.cn\n\nbackup(){\nbackuptime=$(date '+%Y%m%d_%H:%M:%S')\nbackupdir=\"/data/backup/$name/$backuptime\"\nmkdir -p \"${backupdir}\"\nscp $host:${dpdir}/pepperapi.jar ${backupdir}\n}\n\ndeploy(){\nrsync -avz --delete pepperapi.jar ${host}:${dpdir}\nssh -t root@${host} <<EOF\nsed -i '/127.0.0.1:8081/s/^.*$/    server 127.0.0.1:8081 down;/g'  /data/_nginx.conf/pepper.zmapi.cn \nnginx -s reload\nsleep 7\nsystemctl restart pepperapi1\nwhile :\n    do\n        curl -m 3 -sI  \"http://127.0.0.1:8081/run/check/\" | grep 200\n        if [[ $? -eq 0 ]]\n            then\n            echo \"service1 is ok\"\n            break\n        fi\n        sleep 3\n    done\nsleep 3\nsed -i '/127.0.0.1:8081/s/^.*$/    server 127.0.0.1:8081 weight=10;/g'  /data/_nginx.conf/pepper.zmapi.cn\nsed -i '/127.0.0.1:8082/s/^.*$/    server 127.0.0.1:8082 down;/g'  /data/_nginx.conf/pepper.zmapi.cn\nnginx -s reload\nsleep 7\nsystemctl restart pepperapi2\nwhile :\n    do\n        curl -m 3 -sI  \"http://127.0.0.1:8082/run/check/\" | grep 200\n        if [[ $? -eq 0 ]]\n            then\n            echo \"service2 is ok\"\n            break\n        fi\n        sleep 3\n    done\nsleep 3\nsed -i '/127.0.0.1:8082/s/^.*$/    server 127.0.0.1:8082 weight=10;/g'  /data/_nginx.conf/pepper.zmapi.cn\nnginx -s reload\nEOF\n}\n\nhost=api\nbackup\n\nfor host in  {api,api2}\ndo\ndeploy\ndone\nif [[ $? -eq 0 ]]\n    then\n    curl \"http://water2/run/push/?target=@alarm&msg=pepperapi发布成功\"\n    else\n    curl \"http://water2/run/push/?target=@alarm&msg=pepperapi发布失败\"\n    break\nfi\n\nrm -rf ${name}.jar\n","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20200901152715,"update_fulltime":20200901152956,"use_whitelist":""},{"file_id":268,"file_type":2,"tag":"_ops","label":"","path":"/_ops/rockrpc.sh","rank":0,"is_staticize":true,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"sh","content_type":"text/plain","content":"#!/usr/bin/bash\n\nname=\"rockrpc\"\ndpdir=/data/sss/water.zmapi.cn\n\nbackup(){\nbackuptime=$(date '+%Y%m%d_%H:%M:%S')\nbackupdir=\"/data/backup/$name/$backuptime\"\nmkdir -p \"${backupdir}\"\nscp $host1:${dpdir}/rockrpc.jar ${backupdir}\n}\n\ndeploy(){\nrsync -avz --delete rockrpc.jar ${host}:${dpdir}\nssh -t root@${host} <<EOF\nip=$(ip addr |grep inet |grep -v inet6 |grep eth0 | awk '{print $2}' | awk -F \"/\" '{print $1}')\ncurl http://water2/sev/set/?s=rockrpc@${ip}:8085,0\nsleep 2\nsystemctl restart rockrpc1\nsleep 2\ncurl http://water2/sev/set/?s=rockrpc@${ip}:8085,1\ncurl http://water2/sev/set/?s=rockrpc@${ip}:8086,0\nsleep 2\nsystemctl restart rockrpc2\nsleep 2\ncurl http://water2/sev/set/?s=rockrpc@${ip}:8086,1\nEOF\n}\n\nhost=water\nbackup\n\nfor host in  {waterapi,waterapi2}\ndo\ndeploy\ndone\nif [[ $? -eq 0 ]]\n    then\n    curl \"http://water2/run/push/?target=@alarm&msg=rockrpc发布成功\"\n    else\n    curl \"http://water2/run/push/?target=@alarm&msg=rockrpc发布失败\"\n    break\nfi\n\nrm -rf ${name}.jar\n","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20200901152815,"update_fulltime":20210517170318,"use_whitelist":""},{"file_id":352,"file_type":1,"tag":"water","label":"","path":"/water/log_del_15d_bef","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let list = water.db(\"water/water\")\n                .sql(\"SELECT logger_id,tag,logger,keep_days,DATE_FORMAT(DATE_ADD(NOW(),INTERVAL -keep_days DAY),'%Y%m%d') date FROM water_cfg_logger\")\n                .getMapList();\n\nlet hub = Java.type('org.noear.water.protocol.ProtocolHub');\nlet map = {};\n\nfor(let i in list){\n    let m = list[i];\n    \n    try{\n        let timecount = new Timecount().start();\n        let num = hub.logQuerier.clear(m.logger, m.keep_days, 100000);\n        map[m.logger] = num;\n        \n        XUtil.log(`${m.logger} deleted : ${num} - ${timecount.stop().milliseconds()}ms`);\n    }catch(err){\n      XUtil.log(err);\n    }\n}\n\nreturn map;\n","note":"日志-删除过期的数据","plan_state":9,"plan_begin_time":1579236868000,"plan_last_time":1679022899039,"plan_last_timespan":531,"plan_next_time":1679028868039,"plan_interval":"1h","plan_max":0,"plan_count":6912,"create_fulltime":20200117125441,"update_fulltime":20210508103956,"use_whitelist":""},{"file_id":353,"file_type":1,"tag":"water","label":"","path":"/water/msg_del_3d","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"var date3 = Datetime.Now().addDay(-3).getDate();\n\nvar hub = Java.type('org.noear.water.protocol.ProtocolHub');\n\n//删除\n//\nfor(let ms of hub.getMsgBrokerList()){\n    ms.getSource().clear(date3);\n}\n\nreturn \"ok\";","note":"消息清理和统计","plan_state":9,"plan_begin_time":1579237979000,"plan_last_time":1679022899038,"plan_last_timespan":72,"plan_next_time":1679026379038,"plan_interval":"1h","plan_max":0,"plan_count":7060,"create_fulltime":20200117131300,"update_fulltime":20211104121009,"use_whitelist":""},{"file_id":354,"file_type":1,"tag":"water","label":"","path":"/water/msg_reset","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"\nlet hub = Java.type('org.noear.water.protocol.ProtocolHub');\nlet map = {};\n\nfor(let ms of hub.getMsgBrokerList()){\n    let rst = ms.getSource().reset(30);\n    \n    map[ms.getName()] = rst;\n\n    XUtil.log(ms.getName() + \"::reset-\" + rst);\n}\n\nreturn map;","note":"消息异常重置","plan_state":9,"plan_begin_time":1579239545000,"plan_last_time":1679023266803,"plan_last_timespan":12,"plan_next_time":1679023325803,"plan_interval":"1m","plan_max":0,"plan_count":928,"create_fulltime":20200117132352,"update_fulltime":20211104122534,"use_whitelist":""},{"file_id":355,"file_type":1,"tag":"water","label":"","path":"/water/speed_del_30","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let t1 = new Datetime().addDay(-3).getTicks();\nlet d2 = new Datetime().addDay(-3).getDate();\nlet d3 = new Datetime().addDay(-30).getDate();\n\nlet db1= water.db('water/water');\ndb1.exe(`DELETE FROM water_reg_service_speed WHERE gmt_modified <?`, t1);\ndb1.exe(`DELETE FROM water_reg_service_speed_date WHERE log_date <?`, d2);\ndb1.exe(`DELETE FROM water_reg_service_speed_hour WHERE log_date <?`, d3);\n\nlet rd2 = water.rd('water/water_redis',5);\nrd2.open0(function(ru){\n  return ru.key('monitor_keys').delete();\n});\n\nreturn 'OK';\n","note":"接口性能-删除超时的记录","plan_state":9,"plan_begin_time":1588695000000,"plan_last_time":1679022899039,"plan_last_timespan":128,"plan_next_time":1679026200039,"plan_interval":"1h","plan_max":0,"plan_count":7012,"create_fulltime":20200506093544,"update_fulltime":1650607098162,"use_whitelist":""},{"file_id":356,"file_type":1,"tag":"water","label":"","path":"/water/speed_sync_ref","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"var date = new Datetime().getDate();\n\nvar db2 = water.db(`water/water`);\n\ndb2.exe(`UPDATE water_reg_service_speed s,water_reg_service_speed_date d\n            SET s.average_ref = d.average\n            WHERE d.log_date=? AND s.service = d.service AND s.tag = d.tag AND s.name_md5 = d.name_md5`, date);\n\n\nreturn 'OK';","note":"接口性能-数据引用同步","plan_state":9,"plan_begin_time":1588694400000,"plan_last_time":1679023141009,"plan_last_timespan":185,"plan_next_time":1679023440009,"plan_interval":"5m","plan_max":0,"plan_count":1440,"create_fulltime":20200506093917,"update_fulltime":20210326153805,"use_whitelist":""},{"file_id":361,"file_type":1,"tag":"_ops","label":"","path":"/_ops/_service_disable_auto","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":true,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let db2 = water.db('water/water');\n\n//\n//分开执行，可以用到索引，进而不用锁全表\n//\ndb2.exe(`\nUPDATE water_reg_service SET is_enabled=0 \nWHERE (address LIKE ?) AND check_last_state=1`, '192.%');\n\n\ndb2.exe(`\nUPDATE water_reg_service SET is_enabled=0 \nWHERE (address LIKE ?) AND check_last_state=1`, '169.%');\n\n\ndb2.exe(`\nUPDATE water_reg_service SET is_enabled=0 \nWHERE (address LIKE ?) AND check_last_state=1`, '10.37.%');\n\n\nreturn 'OK';","note":"服务-内网自动禁用","plan_state":9,"plan_begin_time":1589644800000,"plan_last_time":1638675301000,"plan_last_timespan":73,"plan_next_time":0,"plan_interval":"2m","plan_max":0,"plan_count":4476,"create_fulltime":20200517073534,"update_fulltime":20200819114927,"use_whitelist":""},{"file_id":362,"file_type":1,"tag":"_ops","label":"","path":"/_ops/_msg_subscriber_disable_auto","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":true,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let db2 = water.db('water/water');\n\n//禁用操作\n\n//内网IP\n//\ndb2.exe(`UPDATE water_msg_subscriber SET is_enabled=0 \nWHERE is_enabled=1 AND check_last_state=1 AND receive_url LIKE ?`,'%//192.%');\n\n\n\n//本机IP\n//\ndb2.exe(`UPDATE water_msg_subscriber SET is_enabled=0 \nWHERE is_enabled=1 AND check_last_state=1 AND receive_url LIKE ?`,'%//0:0:%');\n\ndb2.exe(`UPDATE water_msg_subscriber SET is_enabled=0 \nWHERE is_enabled=1 AND check_last_state=1 AND receive_url LIKE ?`,'%//127.0%');\n\n\nreturn \"OK\";","note":"消息-删除无意义的内网订阅者","plan_state":9,"plan_begin_time":1589644800000,"plan_last_time":1638675301000,"plan_last_timespan":111,"plan_next_time":0,"plan_interval":"2m","plan_max":0,"plan_count":4475,"create_fulltime":20200517073835,"update_fulltime":1638675726251,"use_whitelist":""},{"file_id":364,"file_type":1,"tag":"water","label":"","path":"/water/_service_consumer_del_3h","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let date = Datetime.Now().addHour(-3).getTicks();\n\nlet db2 = water.db('water/water');\n\ndb2.table('water_reg_consumer')\n   .where('chk_fulltime < ?',date)\n   .delete();\n     \n     \nreturn 'OK';","note":"网关-删除3小时没活跃的消息者记录","plan_state":9,"plan_begin_time":1592150400000,"plan_last_time":1679022899040,"plan_last_timespan":128,"plan_next_time":1679025600040,"plan_interval":"1h","plan_max":0,"plan_count":7019,"create_fulltime":20200615161006,"update_fulltime":1638676079707,"use_whitelist":""},{"file_id":365,"file_type":1,"tag":"water","label":"","path":"/water/msg_persistence","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let date90 = Datetime.Now().addDay(-90).getDate();\nlet date2 = Datetime.Now().addDay(-2).getDate();\n\nlet hub = Java.type('org.noear.water.protocol.ProtocolHub');\n\nfor(let ms of hub.getMsgBrokerList()){\n    ms.getSource().persistence(date2,date90);\n}\n\n\nreturn \"ok\";","note":"消息持久化处理","plan_state":9,"plan_begin_time":1593370800000,"plan_last_time":1653983922168,"plan_last_timespan":559,"plan_next_time":1654023600168,"plan_interval":"1d","plan_max":0,"plan_count":528,"create_fulltime":20200630111248,"update_fulltime":20211104120701,"use_whitelist":""},{"file_id":366,"file_type":1,"tag":"water","label":"","path":"/water/_service_consumer_sync","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let db2 = water.db('water/water');\n\ndb2.exe(`UPDATE water_reg_consumer c, water_reg_service s \n            SET c.chk_fulltime = s.check_last_time,\n                c.chk_last_state = s.check_last_state,\n                c.is_enabled = s.is_enabled\n          WHERE c.consumer_address = s.address`);\n          \n          \nreturn 'OK';","note":"网关-同步消费者记录","plan_state":9,"plan_begin_time":1593705600000,"plan_last_time":1679023261739,"plan_last_timespan":46,"plan_next_time":1679023320739,"plan_interval":"1m","plan_max":0,"plan_count":7397,"create_fulltime":20200703101656,"update_fulltime":20200706100940,"use_whitelist":""},{"file_id":367,"file_type":1,"tag":"water","label":"","path":"/water/log_alarm","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let db2 = water.db(\"water/water\");\n\nlet list = db2.sql(\"SELECT logger_id,tag,logger,source FROM water_cfg_logger WHERE is_alarm=1\")\n              .getMapList();\n                \n\nlet map1  = XUtil.newMap();\nlet list1 = db2.sql(\"SELECT name, total_num, total_num_slow5 FROM water_reg_service_speed WHERE service=? AND TAG=?\",'_waterlog','logger')\n               .getMapList();\n\nfor(let m1 of list1){\n   map1.put(m1.name, m1.total_num_slow5);\n}\n\nlet alarm_sign = XUtil.cfgGet('water/alarm_sign');\n\nlet date1 = Datetime.Now().getDate();\nlet hub = Java.type('org.noear.water.protocol.ProtocolHub');\n                \nfor(let m of list){\n    \n    // try{\n        let key2 = \"log_num__\" + m.logger;\n        let num2_old = XUtil.cfgGet(key2);\n        if(!num2_old){\n            num2_old = \"0\";\n        }\n\n        \n        let num2 = map1.get(m.logger);\n        \n        if(num2){\n            if((parseInt(num2_old) != num2)){\n                let msg = `预警：错误日志数量::${num2}`;\n                let sgin = `[${m.logger}][${alarm_sign}]`;\n                \n                water.heihei('@alarm,@'+m.tag, msg, sgin);\n\n                XUtil.cfgSet(key2, num2+'');\n            }\n            \n            XUtil.log(`${m.logger} err old:${num2_old} new:${num2}`);\n        }\n        \n    // }catch(err){\n    //   XUtil.log({content:err.message});\n    // }\n}\n\nreturn 'OK';","note":"日志-检查错误数量并告警","plan_state":9,"plan_begin_time":1595347200000,"plan_last_time":1679023200915,"plan_last_timespan":241,"plan_next_time":1679023320915,"plan_interval":"2m","plan_max":0,"plan_count":2868,"create_fulltime":20200723141233,"update_fulltime":1637391264306,"use_whitelist":""},{"file_id":368,"file_type":1,"tag":"water","label":"","path":"/water/_service_runtime_pull","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let db2 = water.db(\"water/water\");\n\nlet serivers = db2.table(\"water_reg_service\").whereEq(\"check_type\",0).andEq('is_enabled',1).select(\"key,name,address\").getMapList();\nlet datetime = Datetime.Now();\n\n//let TrackBuffer = Java.type(\"org.noear.water.track.TrackBuffer\")\n\nfunction execDo(s1){\n   try{\n      let rst_str = water.getStatus(s1.address);\n\n      if(rst_str && rst_str.startsWith(\"{\")){\n         let rst = JSON.parse(rst_str);\n\n         if(rst.data){\n            rst = rst.data;\n         }\n\n         if(!rst.memoryMax){\n            return;\n         }\n\n         let logM = XUtil.newMap();\n         logM.tag = \"sevchk\";\n         logM.tag1 = s1.address;\n         logM.tag2 = s1.name;\n         \n         logM.content = rst_str;\n         water.logInfo(\"water_log_sev\", logM);\n\n         logM.content = `App:: memoryMax:${rst.memoryMax} - memoryTotal:${rst.memoryTotal} - memoryUsed:${rst.memoryUsed} - threadCount:${rst.threadCount}`;\n         water.logDebug(\"water_log_sev\", logM);\n\n   \n         db2.table(\"water_reg_service_runtime\")\n            .set(\"key\",s1.key)\n            .set(\"name\",s1.name)\n            .set(\"address\",s1.address)\n            .set(\"log_date\",datetime.getDate())\n            .set(\"log_hour\",datetime.getHours())\n            .set(\"log_minute\",datetime.getMinutes())\n            .set(\"log_fulltime\",\"$NOW()\")\n            .set(\"memory_max\", rst.memoryMax)\n            .set(\"memory_total\", rst.memoryTotal)\n            .set(\"memory_used\", rst.memoryUsed)\n            .set(\"thread_peak_count\", rst.threadPeakCount)\n            .set(\"thread_count\", rst.threadCount)\n            .set(\"thread_daemon_count\", rst.threadDaemonCount)\n            .insertBy(\"key,log_date,log_hour,log_minute\");\n      }\n   }catch(err){\n      XUtil.log(err);\n   }\n}\n\nserivers.parallelStream().forEach(execDo);\n\nreturn \"OK\";","note":"服务-运行时信息拉取","plan_state":9,"plan_begin_time":1600048619000,"plan_last_time":1679023199900,"plan_last_timespan":912,"plan_next_time":1679023499900,"plan_interval":"5m","plan_max":0,"plan_count":4620,"create_fulltime":20200914092930,"update_fulltime":1638495543457,"use_whitelist":""},{"file_id":369,"file_type":1,"tag":"water","label":"","path":"/water/_service_runtime_15d_del","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":" var db2 = water.db(\"water/water\");\n var date = Datetime.Now().addDay(-15).getDate();\n \n db2.table(\"water_reg_service_runtime\").where('log_date<?',date).delete();\n\n\n return 'OK';","note":"服务-运行时信息超时删除","plan_state":9,"plan_begin_time":1611072000000,"plan_last_time":1679022899046,"plan_last_timespan":107,"plan_next_time":1679025600046,"plan_interval":"1h","plan_max":0,"plan_count":7043,"create_fulltime":20210120144139,"update_fulltime":20210818172652,"use_whitelist":""},{"file_id":370,"file_type":1,"tag":"water","label":"","path":"/water/msg_stat_sync","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let db2= water.db('water/water');\n\nlet date = Datetime.Now();\n\nlet yesterday = date.addDay(-1).getDate();\n\n\nlet list1 = db2.exe(\"list::SELECT name, total_num FROM water_reg_service_speed WHERE service=? AND TAG=?\",'_watermsg','topic');\nlet list2 = db2.exe(\"list::SELECT name, total_num FROM water_reg_service_speed_date WHERE service=? AND TAG=? AND log_date=?\",'_watermsg','topic',yesterday);\n\nfor(let m of list1){\n    db2.table('water_msg_topic')\n       .set('stat_msg_day_num',m.total_num)\n       .whereEq('topic_name',m.name)\n       .update();\n}\n\nfor(let m of list2){\n    db2.table('water_msg_topic')\n       .set('stat_msg_day_num','$stat_msg_day_num+'+m.total_num)\n       .whereEq('topic_name',m.name)\n       .update();\n}\n\nreturn 'OK';\n\n","note":"消息统计同步","plan_state":9,"plan_begin_time":1619193600000,"plan_last_time":1679022899044,"plan_last_timespan":129,"plan_next_time":1679023440044,"plan_interval":"10m","plan_max":0,"plan_count":618,"create_fulltime":20210424182443,"update_fulltime":20211104122405,"use_whitelist":""},{"file_id":371,"file_type":1,"tag":"water","label":"","path":"/water/log_stat_sync","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let db2= water.db('water/water');\nlet date = Datetime.Now();\n\nlet yesterday = date.addDay(-1).getDate();\nlet beforeday = date.addDay(-1).getDate();\n\nlet list1 = db2.exe(\"list::SELECT name, total_num, total_num_slow5 FROM water_reg_service_speed WHERE service=? AND TAG=?\",'_waterlog','logger');\nlet list2 = db2.exe(\"list::SELECT name, total_num, total_num_slow5 FROM water_reg_service_speed_date WHERE service=? AND TAG=? AND log_date=?\",'_waterlog','logger',yesterday);\nlet list3 = db2.exe(\"list::SELECT name, total_num, total_num_slow5 FROM water_reg_service_speed_date WHERE service=? AND TAG=? AND log_date=?\",'_waterlog','logger',beforeday);\n\n\nXUtil.tran(()=>{\n    for(let m of list1){\n        db2.table('water_cfg_logger')\n        .set('row_num_today',m.total_num)\n        .set('row_num_today_error',m.total_num_slow5)\n        .whereEq('logger',m.name)\n        .update();\n    }\n});\n\nXUtil.tran(()=>{\n    for(let m of list2){\n        db2.table('water_cfg_logger')\n        .set('row_num_yesterday',m.total_num)\n        .set('row_num_yesterday_error',m.total_num_slow5)\n        .whereEq('logger',m.name)\n        .update();\n    }\n});\n\nXUtil.tran(()=>{\n    for(let m of list3){\n        db2.table('water_cfg_logger')\n        .set('row_num_beforeday',m.total_num)\n        .set('row_num_beforeday_error',m.total_num_slow5)\n        .whereEq('logger',m.name)\n        .update();\n    }\n});\n\nreturn 'OK';\n\n","note":"日志统计同步","plan_state":9,"plan_begin_time":1619193600000,"plan_last_time":1679022899044,"plan_last_timespan":242,"plan_next_time":1679023440044,"plan_interval":"10m","plan_max":0,"plan_count":577,"create_fulltime":20210424192104,"update_fulltime":1676964232603,"use_whitelist":""},{"file_id":372,"file_type":1,"tag":"water","label":"","path":"/water/speed_sync","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let util = requireX('/water/speed_sync.fun');\n\nlet rd = water.rd('water/water_redis',5);\n\nlet rlist = rd.open1(function(ru){\n  return ru.key('monitor_keys').hashGetAll();\n});\n\nvar jlist = [];\nrlist.forEach(function(k,v){\n  jlist.push(k);\n});\n\nXUtil.log('monitor_keys.size = ' + jlist.length);\n\nlet now = new Datetime();\n\nlet log_date = now.toString('yyyyMMdd');\nlet list = XUtil.newList();\n\nfor(let i in jlist){\n  let ikey = jlist[i];\n  let dkey = ikey +'$'+ log_date;\n\n  let dd = rd.open1((ru)=>{\n  return ru.key(dkey).hashGetAll();\n  });\n\n  if(dd && dd.size()>0){\n    let ss = ikey.split('$');\n    let mm = util.map2json(dd);\n\n    mm.service = ss[0];\n    mm.tag = ss[1];\n    mm.name_md5 = ss[2];\n    mm.name = WaterClient.Track.getName(mm.name_md5);\n    mm.name_md5 = WaterClient.Track.getNameMd5(mm.name_md5);//兼容旧的数据\n    mm.lastupdated = rlist.get(ikey);\n\n    if(mm.lastupdated){\n      if(mm.lastupdated.indexOf('-') < 0){\n        mm.lastupdated = mm.lastupdated;\n      }else{\n        mm.lastupdated = Datetime.parse(mm.lastupdated, \"yyyy-MM-dd HH:mm:ss\").getTicks();\n      }\n    }\n\n    if(mm.name && mm.name.length > 900){\n      mm.name = mm.name.substr(0,900);\n    }\n\n\n    if(mm.service && mm.service != 'null'){\n        list.add(mm);\n    }\n  }\n}\n\nXUtil.tran(()=>{\n  for(let mm of list){\n    util.speed_log(mm);\n  }\n});\n\nreturn 'OK';\n\n","note":"接口性能-从Reids同步概况数据","plan_state":9,"plan_begin_time":1588723200000,"plan_last_time":1679023141012,"plan_last_timespan":2860,"plan_next_time":1679023440012,"plan_interval":"5m","plan_max":0,"plan_count":5242,"create_fulltime":20200506173845,"update_fulltime":1676964232265,"use_whitelist":""},{"file_id":373,"file_type":1,"tag":"water","label":"","path":"/water/speed_sync_date","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let util = requireX('/water/speed_sync.fun');\n\nlet rd = water.rd('water/water_redis',5);\n\nlet rlist = rd.open1(function(ru){\n  return ru.key('monitor_keys').hashGetAll();\n});\n\nvar jlist = [];\nrlist.forEach(function(k,v){\n  jlist.push(k);\n});\n\nXUtil.log('monitor_keys.size = ' + jlist.length);\n\nlet now = new Datetime();\n\nlet log_date = now.toString('yyyyMMdd');\nlet list = XUtil.newList();\n\nfor(var i in jlist){\n  let ikey = jlist[i];\n  let dkey = ikey +'$'+ log_date;\n\n  let dd = rd.open1((ru)=>{\n    return ru.key(dkey).hashGetAll();\n  });\n\n  if(dd && dd.size()>0){\n    let ss = ikey.split('$');\n    let mm = util.map2json(dd);\n\n    mm.service = ss[0];\n    mm.tag = ss[1];\n    mm.name_md5 = ss[2];\n    mm.name = WaterClient.Track.getName(mm.name_md5);\n    mm.name_md5 = WaterClient.Track.getNameMd5(mm.name_md5);//兼容旧的数据\n    mm.log_date = log_date;\n\n    if(mm.name && mm.name.length > 900){\n      mm.name = mm.name.substr(0,900);\n    }\n\n    if(mm.service && mm.service != 'null'){\n        list.add(mm);\n    }\n  }\n}\n\nXUtil.tran(()=>{\n  for(let mm of list){\n    util.speed_log_date(mm);\n  }\n});\n\n\n\nreturn 'OK';\n\n","note":"接口性能-从Reids同步日纬度数据","plan_state":9,"plan_begin_time":1588723200000,"plan_last_time":1679023141012,"plan_last_timespan":2655,"plan_next_time":1679023440012,"plan_interval":"5m","plan_max":0,"plan_count":5278,"create_fulltime":20200506173856,"update_fulltime":1676964232432,"use_whitelist":""},{"file_id":374,"file_type":1,"tag":"water","label":"","path":"/water/speed_sync_hour","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let util = requireX('/water/speed_sync.fun');\n\nlet rd = water.rd('water/water_redis',5);\n\nlet rlist = rd.open1(function(ru){\n  return ru.key('monitor_keys').hashGetAll();\n});\n\nvar jlist = [];\nrlist.forEach(function(k,v){\n  jlist.push(k);\n});\n\nXUtil.log('monitor_keys.size = ' + jlist.length);\n\nlet now = new Datetime();\n\nlet log_date = now.toString('yyyyMMdd');\nlet log_hour = now.toString('HH');\nlet list = XUtil.newList();\n\n\nfor(let i in jlist){\n  let ikey = jlist[i];\n  let dkey = ikey +'$'+ log_date + log_hour;\n\n  let dd = rd.open1((ru)=>{\n  return ru.key(dkey).hashGetAll();\n  });\n\n  if(dd && dd.size()>0){\n    let ss = ikey.split('$');\n    let mm = util.map2json(dd);\n\n    mm.service = ss[0];\n    mm.tag = ss[1];\n    mm.name_md5 = ss[2];\n    mm.name = WaterClient.Track.getName(mm.name_md5);\n    mm.name_md5 = WaterClient.Track.getNameMd5(mm.name_md5);//兼容旧的数据\n    mm.log_date = log_date;\n    mm.log_hour = log_hour;\n\n    if(mm.name && mm.name.length > 900){\n      mm.name = mm.name.substr(0,900);\n    }\n\n    if(mm.service && mm.service != 'null'){\n        list.add(mm);\n    }\n  }\n}\n\nXUtil.tran(()=>{\n  for(let mm of list){\n    util.speed_log_hour(mm);\n  }\n});\n\nreturn 'OK';\n","note":"接口性能-从Reids同步时纬度数据","plan_state":9,"plan_begin_time":1588723200000,"plan_last_time":1679023141015,"plan_last_timespan":2601,"plan_next_time":1679023440015,"plan_interval":"5m","plan_max":0,"plan_count":5280,"create_fulltime":20200506173905,"update_fulltime":1676964232516,"use_whitelist":""},{"file_id":375,"file_type":1,"tag":"water","label":"","path":"/water/speed_sync.fun","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"this.map2json = function (map){\n  var obj = {};\n  map.forEach(function(k,v){\n    obj[k] = v;\n  });\n  \n  return obj;\n}\n\n\n\nthis.speed_log = function(m){\n    if(!m.tag || !m.name || !m.average){\n       return 'ERROR';\n    }\n    \n    if(!m.total_num_slow1){\n      m.total_num_slow1=0;\n    }\n    \n    if(!m.total_num_slow2){\n      m.total_num_slow2=0;\n    }\n    \n    if(!m.total_num_slow5){\n      m.total_num_slow5=0;\n    }\n    \n    if(!m.slowest){\n      m.slowest=0;\n    }\n    \n    if(!m.fastest){\n      m.fastest=0;\n    }\n    \n    water.db('water/water')\n      .table('water_reg_service_speed')\n      .set('average',m.average).set('fastest',m.fastest)\n      .set('slowest',m.slowest).set('total_num',m.total_num)\n      .set('service',m.service)\n      .set('tag',m.tag)\n      .set('name_md5',m.name_md5)\n      .set('name',m.name)\n      .set('total_num_slow1',m.total_num_slow1)\n      .set('total_num_slow2',m.total_num_slow2)\n      .set('total_num_slow5',m.total_num_slow5)\n      .build(function(tb){\n        if(m.lastupdated){\n          tb.set('gmt_modified',m.lastupdated);\n        }\n      })\n      .upsert('service,tag,name_md5');\n    \n    return 'OK';\n}\n\nthis.speed_log_date = function(m){\n    if(!m.tag || !m.name || !m.average || !m.log_date){\n       return 'ERROR';\n    }\n    \n    if(!m.slowest){\n      m.slowest=0;\n    }\n    \n    if(!m.fastest){\n      m.fastest=0;\n    }\n    \n    if(m.total_time){\n       m.average = parseInt(m.total_time/m.total_num);\n    }\n    \n    water.db('water/water')\n      .table('water_reg_service_speed_date')\n      .set('average',m.average).set('fastest',m.fastest)\n      .set('slowest',m.slowest).set('total_num',m.total_num)\n      .set('service',m.service)\n      .set('tag',m.tag)\n      .set('name',m.name)\n      .set('name_md5',m.name_md5)\n      .set('log_date',m.log_date)\n      .build(function(tb){\n        if(m.total_num_slow1){\n        tb.set('total_num_slow1',m.total_num_slow1);\n      }\n      \n        if(m.total_num_slow2){\n       tb.set('total_num_slow2',m.total_num_slow2);\n      }\n      \n        if(m.total_num_slow5){\n       tb.set('total_num_slow5',m.total_num_slow5);\n      }\n      })\n      .upsert('service,tag,name_md5,log_date');\n    \n    return 'OK';    \n}\n\n\nthis.speed_log_hour = function(m){\n    if(!m.tag || !m.name || !m.average || !m.log_date || !m.log_hour){\n       return 'ERROR';\n    }\n    \n    if(!m.slowest){\n      m.slowest=0;\n    }\n    \n    if(!m.fastest){\n      m.fastest=0;\n    }\n    \n    water.db('water/water')\n      .table('water_reg_service_speed_hour')\n      .set('average',m.average).set('fastest',m.fastest)\n      .set('slowest',m.slowest).set('total_num',m.total_num)\n      .set('service',m.service)\n      .set('tag',m.tag)\n      .set('name',m.name)\n      .set('name_md5',m.name_md5)\n      .set('log_date',m.log_date)\n      .set('log_hour',m.log_hour)\n      .build(function(tb){\n        if(m.total_num_slow1){\n       tb.set('total_num_slow1',m.total_num_slow1);\n      }\n      \n        if(m.total_num_slow2){\n       tb.set('total_num_slow2',m.total_num_slow2);\n      }\n      \n        if(m.total_num_slow5){\n       tb.set('total_num_slow5',m.total_num_slow5);\n      }\n      })\n      .upsert('service,tag,name_md5,log_date,log_hour');\n    \n    \n    return 'OK';    \n}\n\n\n","note":"接口性能-公共函数","plan_state":1,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"1h","plan_max":0,"plan_count":0,"create_fulltime":20200506174048,"update_fulltime":1637651952119,"use_whitelist":""},{"file_id":378,"file_type":3,"tag":"_demo","label":"@demo.topic.name","path":"/_demo/demo.topic.name","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"\nlet eventDo = ctx.attr('event'); //::MessageM{times,trace_id,key,topic,message,sgin,tags,toJson()}\n\nif(eventDo){\n    XUtil.log(\"event: \" + eventDo.toJson());\n    XUtil.log(\"event.message: \" + eventDo.message);\n}else{\n    XUtil.log(\"no event\")\n}\n\n\n//返回大写的OK，才算事件执行成功\nreturn 'OK';","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20210819122931,"update_fulltime":20211025134908,"use_whitelist":""},{"file_id":379,"file_type":1,"tag":"water","label":"","path":"/water/msg_alarm","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let hub = Java.type('org.noear.water.protocol.ProtocolHub');\n\nlet alarm_sign = XUtil.cfgGet('water/alarm_sign');\n\nfor(let ms of hub.getMsgBrokerList()){\n    let num = ms.getSource().getWarnCount();\n\n    if(num > 10){\n        let msg = `预警：未派发消息数::${num}`;\n        let sgin = `[${ms.getName()}][${alarm_sign}]`;\n\n        water.heihei('@alarm', msg, sgin);\n    }\n}\n\n","note":"消息尝试告警","plan_state":9,"plan_begin_time":1609430400000,"plan_last_time":1679023261742,"plan_last_timespan":14,"plan_next_time":1679023320742,"plan_interval":"1m","plan_max":0,"plan_count":3811,"create_fulltime":20211104114704,"update_fulltime":1637391300039,"use_whitelist":""},{"file_id":380,"file_type":0,"tag":"water","label":"","path":"/water/code/generate","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"\nlet tag = ctx.param('tag');\nlet key = ctx.param('key');\nlet tb  = ctx.param(\"tb\");\n\nlet db2 = water.db(tag+'/'+key);\n\n\nlet tbs = XUtil.newList();\n\ndb2.getMetaData().getTableAll().forEach((tw)=>{\n    tbs.add(tw.getName());\n});\n\ntbs.sort(null);\n\nreturn {code: 1, msg:\"成功\", tbs: tbs};\n\n","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"create_fulltime":20211107072624,"update_fulltime":1644927696387,"use_whitelist":""},{"file_id":382,"file_type":2,"tag":"_code","label":"","path":"/_code/java_model2","rank":-1,"is_staticize":true,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"freemarker","content_type":"","content":"import lombok.Data;\nimport java.util.*;\n\n@Data\npublic class ${table_camel!}Do {\n    \n    <#list fields!! as f>\n  /** ${(f.comment)!} */\n    public ${(f.type2)!} ${(f.field)!};\n    </#list>\n\n}","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"update_fulltime":1637763140180,"use_whitelist":""},{"file_id":415,"file_type":1,"tag":"demo","label":"","path":"/demo/_demoapi/_demo_test","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":true,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"return water.job('demoapi','demo_test',{});","note":"","plan_state":8,"plan_begin_time":1647269101000,"plan_last_time":1650556860000,"plan_last_timespan":54,"plan_next_time":0,"plan_interval":"0 1 * * * ?","plan_max":0,"plan_count":1,"create_fulltime":1647269102175,"update_fulltime":1647269102175,"use_whitelist":""},{"file_id":416,"file_type":1,"tag":"water","label":"","path":"/water/_upgrade","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"let upgrade_tag = 'water_upgrade_tag';\n\n//1.版本检测\nlet ver_old_str = XUtil.cfgGet(upgrade_tag);\nif(!ver_old_str){\n    ver_old_str = '0';\n}\n\nlet ver_new = 9;\nlet ver_old = parseInt(ver_old_str);\n\nif(ver_old >= ver_new){\n    return 'No upgrade';\n}\n\n//2.开始更新\n\nlet db2;\n\n//for 2.5.8\nif(ver_old < 1){\n    if(!db2){\n        db2 = water.db('water/water');\n    }\n\n    //::规则计算\n    let idList;\n    let tmpRes = db2.table('grit_resource').whereEq('display_name','规则计算').limit(1).selectMap('*');\n    if(tmpRes.resource_id){\n        idList = db2.table('grit_resource').whereEq('resource_pid', tmpRes.resource_id).selectArray('resource_id');\n        if(idList.size() > 0){\n            db2.table('grit_resource_linked').whereIn('resource_id',idList).delete();\n            db2.table('grit_resource').whereEq('resource_pid',tmpRes.resource_id).delete();\n            db2.table('grit_resource').whereEq('resource_id',tmpRes.resource_id).delete();\n        }\n    }\n\n    //::Ops\n    tmpRes = db2.table('grit_resource').whereEq('display_name','计算资源').limit(1).selectMap('*');\n    if(tmpRes.size() > 0){\n        let rst = db2.table('grit_resource').set('link_uri','/cfg/server').set('resource_pid',9).set('order_index',21)\n                    .whereEq('resource_id',tmpRes.resource_id).andNeq('resource_pid',9)\n                    .update();\n\n        if(rst){ //如果更新成功\n            tmpRes.remove(\"resource_id\");\n\n            db2.table('grit_resource')\n            .setMap(tmpRes).set('display_name','$').set('order_index',20).set('link_uri','').set('resource_pid',9).set(\"guid\", XUtil.guid())\n            .usingNull(false)\n            .usingExpr(false)\n            .insert();\n        }\n    }\n\n    idList = db2.table('grit_resource').whereEq('resource_pid',13).selectArray('resource_id');\n    if(idList.size() > 0){\n        db2.table('grit_resource_linked').whereIn('resource_id',idList).delete();\n        db2.table('grit_resource').whereEq('resource_pid',13).delete();\n        db2.table('grit_resource').whereEq('resource_id',13).delete();\n    }\n\n    //::Dev\n    db2.table('grit_resource').set('display_name','开发助手').whereEq('resource_id',12).update();\n\n    //::FaaS\n    db2.table('grit_resource').set('display_name','函数计算').whereEq('resource_id',10).update();\n}\n\n//for 2.6.0\nif(ver_old < 2){\n    if(!db2){\n        db2 = water.db('water/water');\n    }\n\n    //::安全名单\n    let tmlRes = db2.table('grit_resource').whereEq('display_name','安全名单').limit(1).selectMap('*');\n\n    if(tmlRes.size() > 0){\n        tmlRes.remove(\"resource_id\");\n\n        //::访问密钥\n        if(db2.table('grit_resource').whereEq('resource_pid',tmlRes.resource_pid).andEq('link_uri','/cfg/key').selectExists() == false){\n            db2.table('grit_resource')\n                .setMap(tmlRes).set('display_name','访问密钥').set('order_index',12).set('link_uri','/cfg/key').set(\"guid\", XUtil.guid())\n                .usingNull(false)\n                .usingExpr(false)\n                .insert();\n        }\n\n        //::多语言包\n        if(db2.table('grit_resource').whereEq('resource_pid',tmlRes.resource_pid).andEq('link_uri','/cfg/i18n').selectExists() == false){\n            db2.table('grit_resource')\n                .setMap(tmlRes).set('display_name','多语言包').set('order_index',13).set('link_uri','/cfg/i18n').set(\"guid\", XUtil.guid())\n                .usingNull(false)\n                .usingExpr(false)\n                .insert();\n        }\n    }\n}\n\n//for 2.6.1\nif(ver_old < 3){\n    if(!db2){\n        db2 = water.db('water/water');\n    }\n\n    //禁用\n    db2.table('grit_resource').set('is_disabled','1').whereEq('display_name','数据同步').andEq('link_uri','/tool/sync').update();\n    //改名\n    db2.table('grit_resource').set('order_index',5).set('display_name','上游配置').whereEq('display_name','网关配置').andEq('link_uri','/cfg/gateway').update();\n    db2.table('grit_resource').set('display_name','上游监控').whereEq('display_name','网关监控').andEq('link_uri','/mot/gw').update();\n}\n\n\n//for 2.7.0\nif(ver_old < 4){\n    if(!db2){\n        db2 = water.db('water/water');\n    }\n\n    //禁用\n    db2.table('grit_resource').whereEq('display_name','数据同步').andEq('link_uri','/tool/sync').delete();\n}\n\n//for 2.7.1\nif(ver_old < 5){\n    if(!db2){\n        db2 = water.db('water/water');\n    }\n\n    //资源改名\n    db2.table('grit_resource').set('display_name','告警工具').whereEq('display_name','日常工具').andEq('link_uri','/tool/').update();\n    //添加资源\n    let tmlRes = db2.table('grit_resource').whereEq('display_name','数据监视').andEq('link_uri','/tool/monitor').limit(1).selectMap('*');\n\n    if(tmlRes.size() > 0){\n        tmlRes.remove(\"resource_id\");\n\n        if(db2.table('grit_resource').whereEq('resource_pid',tmlRes.resource_pid).andEq('link_uri','/tool/detection').selectExists() == false){\n            db2.table('grit_resource')\n                .setMap(tmlRes).set('display_name','应用监视').set('order_index',11).set('link_uri','/tool/detection').set(\"guid\", XUtil.guid())\n                .usingNull(false)\n                .usingExpr(false)\n                .insert();\n        }\n    }\n\n}\n\n//for 2.7.2\nif(ver_old < 6){\n    if(!db2){\n        db2 = water.db('water/water');\n    }\n\n    //添加资源(服务发现)\n    let tmlRes = db2.table('grit_resource').whereEq('display_name','配置管理').andEq('link_uri','/cfg/').limit(1).selectMap('*');\n    if(tmlRes.size() > 0){\n        tmlRes.remove(\"resource_id\");\n\n        if(db2.table('grit_resource').whereEq('resource_pid',tmlRes.resource_pid).andEq('link_uri','/sev/').selectExists() == false){\n            let resId1 = db2.table('grit_resource')\n                .setMap(tmlRes).set('display_name','服务发现').set('order_index',4).set('link_uri','/sev/').set(\"guid\", XUtil.guid())\n                .usingNull(false)\n                .usingExpr(false)\n                .insert();\n\n            //资源改名(上游配置)\n            db2.table('grit_resource').set('resource_pid',resId1).set('link_uri','/sev/gateway')\n               .whereEq('display_name','上游配置').andEq('link_uri','/cfg/gateway')\n               .update();\n        }\n\n        //添加资源（服务列表）\n        tmlRes = db2.table('grit_resource').whereEq('display_name','上游配置').andEq('link_uri','/sev/gateway').limit(1).selectMap('*');\n        if(tmlRes.size() > 0){\n            tmlRes.remove(\"resource_id\");\n\n            if(db2.table('grit_resource').whereEq('resource_pid',tmlRes.resource_pid).andEq('link_uri','/sev/service').selectExists() == false){\n                let resId2 = db2.table('grit_resource')\n                .setMap(tmlRes).set('display_name','服务列表').set('order_index',0).set('link_uri','/sev/service').set(\"guid\", XUtil.guid())\n                .usingNull(false)\n                .usingExpr(false)\n                .insert();\n\n                //为'服务状态'的用户，添加'服务列表'\n                tmlRes = db2.table('grit_resource').whereEq('display_name','服务状态').andEq('link_uri','/mot/service').limit(1).selectMap('*');\n                if(tmlRes.resource_id){\n                    let resList = db2.table('grit_resource_linked').whereEq('resource_id',tmlRes.resource_id)\n                                     .selectDataList('resource_id,subject_id,subject_type');\n\n                    resList.forEach(r1 => {\n                        r1.set('resource_id',resId2);\n                    });\n\n                    db2.table('grit_resource_linked').insertList(resList.getRows());\n                }\n            }\n        }\n    }\n}\n\n//for 2.7.2\nif(ver_old < 7){\n    if(!db2){\n        db2 = water.db('water/water');\n    }\n\n    //资源改名\n    db2.table('grit_resource').set('display_name','系统监控').whereEq('display_name','服务监控').andEq('link_uri','/mot/').update();\n}\n\n//for 2.8.1\nif(ver_old < 8){\n    if(!db2){\n        db2 = water.db('water/water');\n    }\n\n    //添加资源（服务列表）\n    tmlRes = db2.table('grit_resource').whereEq('display_name','应用监视').andEq('link_uri','/tool/detection').limit(1).selectMap('*');\n    if(tmlRes.size() > 0){\n        let tmlResId = tmlRes.resource_id;\n        tmlRes.remove(\"resource_id\");\n\n        if(db2.table('grit_resource').whereEq('resource_pid',tmlRes.resource_pid).andEq('link_uri','/tool/certification').selectExists() == false){\n            let resId2 = db2.table('grit_resource')\n            .setMap(tmlRes).set('display_name','证书监视').set('order_index',10).set('link_uri','/tool/certification').set(\"guid\", XUtil.guid())\n            .usingNull(false)\n            .usingExpr(false)\n            .insert();\n\n            //为'应用监视'的用户，添加'证书监视'\n            if(tmlResId){\n                let resList = db2.table('grit_resource_linked').whereEq('resource_id',tmlResId)\n                                    .selectDataList('resource_id,subject_id,subject_type');\n\n                resList.forEach(r1 => {\n                    r1.set('resource_id',resId2);\n                });\n\n                db2.table('grit_resource_linked').insertList(resList.getRows());\n            }\n        }\n    }\n}\n\nif(ver_old < 9){\n    if(!db2){\n        db2 = water.db('water/water');\n    }\n\n    if(!hasCol('water_cfg_key','metainfo')){\n        db2.exe( \"ALTER TABLE `water_cfg_key` \"+\n                \" ADD COLUMN `metainfo` varchar(2000) NULL COMMENT '元信息' AFTER `description`;\");\n    }\n}\n\nfunction hasCol(tb,col){\n   return db2.table('information_schema.columns')\n            .where('TABLE_SCHEMA=?',db2.schema())\n            .and(\"table_name=?\",tb)\n            .and(\"column_name=?\",col)\n            .exists();\n}\n\n//3.设定版本\nXUtil.cfgSet(upgrade_tag, ver_new+'');\n\nreturn 'OK';","note":"框架升级","plan_state":9,"plan_begin_time":1647579578000,"plan_last_time":1679022953061,"plan_last_timespan":4797,"plan_next_time":1679029178061,"plan_interval":"1h","plan_max":0,"plan_count":1749,"update_fulltime":1679022932153,"use_whitelist":""},{"file_id":421,"file_type":0,"tag":"demo","label":"","path":"/demo/mot/test","rank":0,"is_staticize":false,"is_editable":true,"is_disabled":false,"is_exclude":false,"link_to":"","edit_mode":"javascript","content_type":"","content":"return {num:23};","note":"","plan_state":0,"plan_last_timespan":0,"plan_next_time":0,"plan_interval":"","plan_max":0,"plan_count":0,"update_fulltime":1653657703374,"use_whitelist":"server"}]